#!/usr/bin/env python3
"""
GUI Logs Analyzer –¥–ª—è Plitka Pro
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–æ–≥–∏ GUI –∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç—ã
"""

import os
import json
import glob
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any

class GUILogsAnalyzer:
    def __init__(self, project_root="/home/papaandrey/plitka-pro-project"):
        self.project_root = Path(project_root)
        self.logs_dir = self.project_root / "docs" / "reports" / "gui_logs" / "realtime"
        self.reports_dir = self.project_root / "docs" / "reports"
        
    def analyze_all_sessions(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.logs_dir.exists():
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –∞–Ω–∞–ª–∏–∑–∞
        analysis_files = list(self.logs_dir.glob("*_analysis.json"))
        
        if not analysis_files:
            print("‚ùå –§–∞–π–ª—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(analysis_files)} —Å–µ—Å—Å–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é
        all_sessions = []
        for analysis_file in analysis_files:
            session_data = self._load_session_analysis(analysis_file)
            if session_data:
                all_sessions.append(session_data)
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        self._create_summary_report(all_sessions)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º
        self._create_issues_report(all_sessions)
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def _load_session_analysis(self, analysis_file: Path) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–∏"""
        try:
            with open(analysis_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {analysis_file}: {e}")
            return None
    
    def _create_summary_report(self, sessions: List[Dict[str, Any]]):
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Å–µ—Å—Å–∏—è–º"""
        report_file = self.reports_dir / "gui_logs_summary_report.md"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º —Å–µ—Å—Å–∏—è–º
        total_sessions = len(sessions)
        total_logs = sum(s.get('statistics', {}).get('total_logs', 0) for s in sessions)
        total_warnings = sum(s.get('statistics', {}).get('warnings', 0) for s in sessions)
        total_errors = sum(s.get('statistics', {}).get('errors', 0) for s in sessions)
        total_version_issues = sum(s.get('statistics', {}).get('version_issues', 0) for s in sessions)
        total_preset_errors = sum(s.get('statistics', {}).get('preset_errors', 0) for s in sessions)
        
        report = f"""# GUI Logs Summary Report

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π:** {total_sessions}  

## üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ –ª–æ–≥–æ–≤:** {total_logs}
- **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:** {total_warnings}
- **–û—à–∏–±–∫–∏:** {total_errors}
- **–ü—Ä–æ–±–ª–µ–º—ã —Å –≤–µ—Ä—Å–∏—è–º–∏:** {total_version_issues}
- **–û—à–∏–±–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤:** {total_preset_errors}

## üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏—è–º

"""
        
        for session in sessions:
            session_info = session.get('session_info', {})
            stats = session.get('statistics', {})
            
            report += f"""### {session_info.get('session_id', 'Unknown')}
- **–í–µ—Ä—Å–∏—è:** {session_info.get('version', 'unknown')}
- **–•–µ—à:** {session_info.get('hash_id', 'unknown')}
- **–ù–∞—á–∞–ª–æ:** {session_info.get('start_time', 'unknown')}
- **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {session_info.get('duration', 'unknown')}
- **–õ–æ–≥–æ–≤:** {stats.get('total_logs', 0)}
- **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:** {stats.get('warnings', 0)}
- **–û—à–∏–±–∫–∏:** {stats.get('errors', 0)}

"""
        
        report += f"""## üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º

### –¢–æ–ø –ø—Ä–æ–±–ª–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ:
"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
        problem_counts = {}
        for session in sessions:
            logs = session.get('all_logs', [])
            for log in logs:
                content = log.get('content', '')
                if '‚ñ≤' in content or 'warning' in content.lower():
                    problem_counts['warnings'] = problem_counts.get('warnings', 0) + 1
                elif '‚ùå' in content or 'error' in content.lower() or ('–æ—à–∏–±–∫–∞' in content.lower() and '‚ùå' not in content):
                    problem_counts['errors'] = problem_counts.get('errors', 0) + 1
                elif '–≤–µ—Ä—Å–∏—è' in content.lower() and '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞' in content.lower():
                    problem_counts['version_issues'] = problem_counts.get('version_issues', 0) + 1
                elif '–ø—Ä–µ—Å–µ—Ç' in content.lower() and '—Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏' in content.lower():
                    problem_counts['preset_errors'] = problem_counts.get('preset_errors', 0) + 1
        
        for problem, count in sorted(problem_counts.items(), key=lambda x: x[1], reverse=True):
            report += f"- **{problem}:** {count} —Ä–∞–∑\n"
        
        report += f"\n---\n*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"üìÑ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_file}")
    
    def _create_issues_report(self, sessions: List[Dict[str, Any]]):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º"""
        report_file = self.reports_dir / "gui_logs_issues_report.md"
        
        report = f"""# GUI Logs Issues Report

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  

## üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã

"""
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã
        all_issues = []
        for session in sessions:
            logs = session.get('all_logs', [])
            for log in logs:
                if log.get('type') in ['error', 'warning', 'version_issue', 'preset_error']:
                    all_issues.append({
                        'session': session.get('session_info', {}).get('session_id', 'unknown'),
                        'timestamp': log.get('timestamp', 'unknown'),
                        'type': log.get('type', 'unknown'),
                        'content': log.get('content', '')
                    })
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º
        issues_by_type = {}
        for issue in all_issues:
            issue_type = issue['type']
            if issue_type not in issues_by_type:
                issues_by_type[issue_type] = []
            issues_by_type[issue_type].append(issue)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º
        for issue_type, issues in issues_by_type.items():
            report += f"### {issue_type.upper()}\n\n"
            for issue in issues[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                report += f"- **{issue['timestamp']}** [{issue['session']}]: {issue['content']}\n"
            if len(issues) > 10:
                report += f"- ... –∏ –µ—â–µ {len(issues) - 10} –ø—Ä–æ–±–ª–µ–º\n"
            report += "\n"
        
        report += f"""## üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

1. **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:** –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º
2. **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è:** –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
3. **–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤:** –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–æ–±–ª–µ–º –ø–æ –≤–µ—Ä—Å–∏—è–º
4. **–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:** –§–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö

---
*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*
"""
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"üìÑ –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º —Å–æ–∑–¥–∞–Ω: {report_file}")
    
    def analyze_latest_session(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é"""
        if not self.logs_dir.exists():
            print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª –∞–Ω–∞–ª–∏–∑–∞
        analysis_files = list(self.logs_dir.glob("*_analysis.json"))
        if not analysis_files:
            print("‚ùå –§–∞–π–ª—ã –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        latest_file = max(analysis_files, key=os.path.getctime)
        session_data = self._load_session_analysis(latest_file)
        
        if not session_data:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏")
            return
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏: {latest_file.name}")
        
        stats = session_data.get('statistics', {})
        print(f"  - –õ–æ–≥–æ–≤: {stats.get('total_logs', 0)}")
        print(f"  - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {stats.get('warnings', 0)}")
        print(f"  - –û—à–∏–±–∫–∏: {stats.get('errors', 0)}")
        print(f"  - –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–µ—Ä—Å–∏—è–º–∏: {stats.get('version_issues', 0)}")
        print(f"  - –û—à–∏–±–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤: {stats.get('preset_errors', 0)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    analyzer = GUILogsAnalyzer()
    
    print("üîç –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ GUI...")
    analyzer.analyze_all_sessions()
    
    print("\nüìä –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏:")
    analyzer.analyze_latest_session()

if __name__ == "__main__":
    main()
