#!/usr/bin/env python3
"""
GUI Log Analyzer –¥–ª—è Plitka Pro
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ GUI –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
"""

import json
import os
import re
from datetime import datetime
from pathlib import Path

class GUILogAnalyzer:
    def __init__(self, project_root="/home/papaandrey/plitka-pro-project"):
        self.project_root = Path(project_root)
        self.logs_dir = self.project_root / "docs" / "reports" / "gui_logs"
        self.logs_dir.mkdir(parents=True, exist_ok=True)
        
    def save_gui_logs(self, log_content, version="unknown", hash_id="unknown"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏ GUI –≤ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"gui_logs_v{version}_{hash_id}_{timestamp}.txt"
        filepath = self.logs_dir / filename
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(f"=== GUI Logs Analysis - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===\n")
            f.write(f"Version: {version}\n")
            f.write(f"Hash: {hash_id}\n")
            f.write("=" * 80 + "\n\n")
            f.write(log_content)
        
        print(f"‚úÖ –õ–æ–≥–∏ GUI —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filepath}")
        return filepath
    
    def analyze_gui_logs(self, log_content):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ GUI –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã"""
        analysis = {
            "timestamp": datetime.now().isoformat(),
            "warnings": [],
            "errors": [],
            "version_issues": [],
            "preset_errors": [],
            "statistics": {}
        }
        
        lines = log_content.split('\n')
        
        for i, line in enumerate(lines):
            # –ü–æ–∏—Å–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            if "‚ñ≤" in line and "WARNING" in line.upper():
                analysis["warnings"].append({
                    "line": i + 1,
                    "content": line.strip(),
                    "type": "warning"
                })
            
            # –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫
            if "—Ö" in line and "–æ—à–∏–±–∫–∏" in line.lower():
                analysis["errors"].append({
                    "line": i + 1,
                    "content": line.strip(),
                    "type": "error"
                })
            
            # –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º —Å –≤–µ—Ä—Å–∏—è–º–∏
            if "–≤–µ—Ä—Å–∏—è" in line.lower() and "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in line.lower():
                analysis["version_issues"].append({
                    "line": i + 1,
                    "content": line.strip(),
                    "type": "version_issue"
                })
            
            # –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤
            if "–ø—Ä–µ—Å–µ—Ç" in line.lower() and "—Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏" in line.lower():
                analysis["preset_errors"].append({
                    "line": i + 1,
                    "content": line.strip(),
                    "type": "preset_error"
                })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        analysis["statistics"] = {
            "total_warnings": len(analysis["warnings"]),
            "total_errors": len(analysis["errors"]),
            "version_issues": len(analysis["version_issues"]),
            "preset_errors": len(analysis["preset_errors"]),
            "total_lines": len(lines)
        }
        
        return analysis
    
    def save_analysis(self, analysis, version="unknown", hash_id="unknown"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤ JSON —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"gui_analysis_v{version}_{hash_id}_{timestamp}.json"
        filepath = self.logs_dir / filename
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(analysis, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ GUI —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        return filepath
    
    def generate_report(self, analysis, version="unknown", hash_id="unknown"):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ª–æ–≥–æ–≤"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"gui_report_v{version}_{hash_id}_{timestamp}.md"
        filepath = self.logs_dir / filename
        
        report = f"""# GUI Logs Analysis Report

**–î–∞—Ç–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  
**–í–µ—Ä—Å–∏—è:** {version}  
**–•–µ—à:** {hash_id}  

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫:** {analysis['statistics']['total_lines']}
- **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:** {analysis['statistics']['total_warnings']}
- **–û—à–∏–±–∫–∏:** {analysis['statistics']['total_errors']}
- **–ü—Ä–æ–±–ª–µ–º—ã —Å –≤–µ—Ä—Å–∏—è–º–∏:** {analysis['statistics']['version_issues']}
- **–û—à–∏–±–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤:** {analysis['statistics']['preset_errors']}

## ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

"""
        
        for warning in analysis["warnings"]:
            report += f"- **–°—Ç—Ä–æ–∫–∞ {warning['line']}:** {warning['content']}\n"
        
        report += "\n## ‚ùå –û—à–∏–±–∫–∏\n\n"
        
        for error in analysis["errors"]:
            report += f"- **–°—Ç—Ä–æ–∫–∞ {error['line']}:** {error['content']}\n"
        
        report += "\n## üîß –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–µ—Ä—Å–∏—è–º–∏\n\n"
        
        for issue in analysis["version_issues"]:
            report += f"- **–°—Ç—Ä–æ–∫–∞ {issue['line']}:** {issue['content']}\n"
        
        report += "\n## üé® –û—à–∏–±–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤\n\n"
        
        for preset_error in analysis["preset_errors"]:
            report += f"- **–°—Ç—Ä–æ–∫–∞ {preset_error['line']}:** {preset_error['content']}\n"
        
        report += f"\n---\n*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*"
        
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç GUI —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
        return filepath

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    analyzer = GUILogAnalyzer()
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    sample_log = """
    ‚ñ≤ –í–µ—Ä—Å–∏—è v4.5.09 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º v4.5.01
    –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–µ—Å–µ—Ç—ã –∏–∑: test_inputs_v4.5.01_critical_fixes.json
    ‚ñ† –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ—Å–µ—Ç–æ–≤...
    ‚ñ≤ –ü—Ä–µ—Å–µ—Ç 'TRIO COLOR - CONTROLNET METHODS' —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏:
    —Ö –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç 'dkgreen'. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞: RED, BLUE, GREEN, YELLOW, ORANGE, PINK, WHITE, BLACK, GRAY, BROWN...
    —Ö –°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–µ —Ä–∞–≤–Ω–∞ 100%: 70.0%
    """
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤
    log_file = analyzer.save_gui_logs(sample_log, "v4.5.09", "a6fe1706")
    
    # –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤
    analysis = analyzer.analyze_gui_logs(sample_log)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
    analysis_file = analyzer.save_analysis(analysis, "v4.5.09", "a6fe1706")
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    report_file = analyzer.generate_report(analysis, "v4.5.09", "a6fe1706")
    
    print(f"\nüìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
    print(f"  - –õ–æ–≥–∏: {log_file}")
    print(f"  - –ê–Ω–∞–ª–∏–∑: {analysis_file}")
    print(f"  - –û—Ç—á–µ—Ç: {report_file}")

if __name__ == "__main__":
    main()
