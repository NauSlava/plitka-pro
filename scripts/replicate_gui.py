#!/usr/bin/env python3
import os
import json
import threading
import time
import queue
from typing import Any, Dict, List, Optional

import tkinter as tk
from tkinter import ttk, messagebox
# –£–±–∏—Ä–∞–µ–º PIL - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ tkinter –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π
try:
    import replicate
    REPLICATE_AVAILABLE = True
except ImportError:
    REPLICATE_AVAILABLE = False
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å 'replicate' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. GUI –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.")

try:
    import yaml
    YAML_AVAILABLE = True
except ImportError:
    YAML_AVAILABLE = False
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å 'yaml' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–µ—Ä—Å–∏–∏ –±—É–¥—É—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

try:
    import hashlib
    HASHLIB_AVAILABLE = True
except ImportError:
    HASHLIB_AVAILABLE = False
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å 'hashlib' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –•–µ—à–∏ –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")


def compare_versions(version1: str, version2: str) -> int:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤–µ—Ä—Å–∏–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç -1 –µ—Å–ª–∏ version1 < version2, 0 –µ—Å–ª–∏ —Ä–∞–≤–Ω—ã, 1 –µ—Å–ª–∏ version1 > version2"""
    def version_tuple(v):
        # –£–±–∏—Ä–∞–µ–º 'v' –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        v = v.replace('v', '')
        parts = v.split('.')
        return tuple(int(part) for part in parts)
    
    try:
        v1_tuple = version_tuple(version1)
        v2_tuple = version_tuple(version2)
        if v1_tuple < v2_tuple:
            return -1
        elif v1_tuple > v2_tuple:
            return 1
        else:
            return 0
    except (ValueError, IndexError):
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
        return -1 if version1 < version2 else (1 if version1 > version2 else 0)


def load_env_token() -> Optional[str]:
    token = os.getenv("REPLICATE_API_TOKEN")
    if token:
        return token
    env_path = os.path.join(os.getcwd(), ".env")
    if os.path.exists(env_path):
        try:
            with open(env_path, "r", encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    if not line or line.startswith("#"):
                        continue
                    if line.startswith("REPLICATE_API_TOKEN="):
                        _, value = line.split("=", 1)
                        value = value.strip().strip('"').strip("'")
                        if value:
                            return value
        except Exception:
            pass
    return None


def read_presets(path: str) -> Dict[str, Dict[str, Any]]:
    with open(path, "r", encoding="utf-8") as f:
        data = json.load(f)
        if not isinstance(data, dict):
            raise ValueError("Presets JSON must be an object mapping preset names to input dicts")
        return data


class ReplicateWorker:
    def __init__(self, api_token: str, model_ref: str, poll_s: int, startup_timeout_s: int, total_timeout_s: int, ui_queue: "queue.Queue[str]", version_id: Optional[str] = None):
        self.api_token = api_token
        self.model_ref = model_ref
        self.poll_s = poll_s
        self.startup_timeout_s = startup_timeout_s
        self.total_timeout_s = total_timeout_s
        self.ui_queue = ui_queue
        self._stop_event = threading.Event()
        self._thread: Optional[threading.Thread] = None
        self._current_pred = None  # type: ignore
        self._start_time: Optional[float] = None
        self._status: str = "idle"  # idle|starting|processing|succeeded|failed|canceled|timeout
        self._current_run_dir: Optional[str] = None
        self._version_id: Optional[str] = version_id

    def log(self, text: str) -> None:
        try:
            self.ui_queue.put_nowait(text)
        except Exception:
            pass
    
    def _extract_version_from_cog_yaml(self) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ cog.yaml –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è YAML –º–æ–¥—É–ª—è"""
        try:
            with open("cog.yaml", "r", encoding="utf-8") as f:
                content = f.read()
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –≤–µ—Ä—Å–∏–µ–π –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            for line in content.split('\n'):
                if line.strip().startswith('# Version:'):
                    version_part = line.split('Version:')[1].strip()
                    return version_part.split()[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ "Version:"
                
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É –æ–±—Ä–∞–∑–∞
                if 'image:' in line and 'plitka-pro-project:' in line:
                    version_part = line.split('plitka-pro-project:')[1].strip()
                    return version_part
                    
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            return self._determine_version_fallback()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cog.yaml: {e}")
            return self._determine_version_fallback()
    
    def get_optimal_hash(self, version: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è –≤–µ—Ä—Å–∏–∏ (–≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥)"""
        print(f"üîç –ü–æ–∏—Å–∫ —Ö–µ—à–∞ –¥–ª—è –≤–µ—Ä—Å–∏–∏: {version}")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: Docker –æ–±—Ä–∞–∑
        docker_hash = self.get_docker_image_hash(version)
        if docker_hash:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω Docker —Ö–µ—à: {docker_hash}")
            return docker_hash
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: Replicate API
        replicate_hash = self.get_replicate_version_hash(version)
        if replicate_hash:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω Replicate —Ö–µ—à: {replicate_hash}")
            return replicate_hash
        
        # Fallback: –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–∑ –≤–µ—Ä—Å–∏–∏
        computed_hash = self.compute_version_hash(version)
        print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ö–µ—à: {computed_hash}")
        return computed_hash
    
    def get_docker_image_hash(self, version: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ö–µ—à Docker –æ–±—Ä–∞–∑–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        try:
            import subprocess
            # –ò—â–µ–º –æ–±—Ä–∞–∑ –ø–æ —Ç–µ–≥—É –≤–µ—Ä—Å–∏–∏
            result = subprocess.run(
                ["docker", "images", "--format", "{{.ID}}", f"r8.im/nauslava/plitka-pro-project:{version}"],
                capture_output=True, text=True, timeout=10
            )
            if result.returncode == 0 and result.stdout.strip():
                full_hash = result.stdout.strip()
                return full_hash[:8]  # –ü–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–∞–ø–∫–∏
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Docker —Ö–µ—à–∞: {e}")
        return ""
    
    def get_replicate_version_hash(self, version: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ö–µ—à –≤–µ—Ä—Å–∏–∏ Replicate —á–µ—Ä–µ–∑ API"""
        try:
            if not REPLICATE_AVAILABLE:
                return ""
            
            import replicate
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            model_info = replicate.models.get("nauslava/plitka-pro-project")
            if model_info and hasattr(model_info, 'versions'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ versions –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ
                try:
                    versions_list = list(model_info.versions) if hasattr(model_info.versions, '__iter__') else []
                    for ver in versions_list:
                        if hasattr(ver, 'id') and ver.id == version:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º digest –≤–µ—Ä—Å–∏–∏
                            if hasattr(ver, 'digest') and ver.digest:
                                return ver.digest[:8]
                            # –ò–ª–∏ –≤—ã—á–∏—Å–ª—è–µ–º –∏–∑ ID –≤–µ—Ä—Å–∏–∏
                            import hashlib
                            hash_obj = hashlib.md5(ver.id.encode())
                            return hash_obj.hexdigest()[:8]
                except (TypeError, AttributeError) as e:
                    print(f"–û—à–∏–±–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –≤–µ—Ä—Å–∏—è–º: {e}")
                    # Fallback: –≤—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –∏–∑ –≤–µ—Ä—Å–∏–∏
                    import hashlib
                    hash_obj = hashlib.md5(version.encode())
                    return hash_obj.hexdigest()[:8]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Replicate —Ö–µ—à–∞: {e}")
        return ""
    
    def compute_version_hash(self, version: str) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ö–µ—à –≤–µ—Ä—Å–∏–∏ –∫–∞–∫ fallback"""
        try:
            import hashlib
            hash_obj = hashlib.md5(version.encode())
            return hash_obj.hexdigest()[:8]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö–µ—à–∞ –≤–µ—Ä—Å–∏–∏: {e}")
            return "unknown"

    def is_running(self) -> bool:
        return self._thread is not None and self._thread.is_alive()

    def stop(self) -> None:
        self._stop_event.set()
        # Try to cancel current prediction if exists
        try:
            if self._current_pred is not None:
                self.log("\n[GUI] Cancelling current prediction...\n")
                try:
                    self._current_pred.cancel()
                except Exception:
                    pass
        except Exception:
            pass

    def _is_boot_error(self, logs: str) -> bool:
        if not logs:
            return False
        needles = [
            "Traceback (most recent call last)",
            "CRITICAL", "FATAL", "RuntimeError", "CUDA error", "device-side assert",
            "‚ùå", "ERROR:predict:", "OSError: Cannot load model",
        ]
        return any(n in logs for n in needles)

    def _is_boot_completed(self, logs: str) -> bool:
        if not logs:
            return False
        markers = ["setup completed", "üéâ –ú–æ–¥–µ–ª—å v", "Model initialized"]
        return any(m in logs for m in markers)

    def _resolve_model_and_version(self, client, model_ref: str):
        # prefer explicitly provided version id
        if self._version_id:
            base = model_ref.split(":", 1)[0]
            return base, self._version_id
        if ":" not in model_ref:
            return model_ref, None
        base, ver = model_ref.split(":", 1)
        ver = ver.strip()
        if len(ver) == 64 and all(c in "0123456789abcdef" for c in ver.lower()):
            return base, ver
        try:
            if not REPLICATE_AVAILABLE:
                return base, None
            m = client.models.get(base)
            versions = list(m.versions.list())
            if versions:
                return base, versions[0].id
        except Exception:
            pass
        return base, None

    def _run_single(self, client, inputs: Dict[str, Any]) -> int:
        self.log("üîÑ _run_single() –≤—ã–∑–≤–∞–Ω\n")
        model_name, version_id = self._resolve_model_and_version(client, self.model_ref)
        self.log(f"\n=== Creating prediction: {model_name} (version: {version_id or 'latest'})\nInputs: {json.dumps(inputs, ensure_ascii=False)}\n")
        try:
            if not REPLICATE_AVAILABLE:
                self.log("‚ùå Replicate –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å–∫ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.\n")
                return 1
            if version_id:
                pred = client.predictions.create(version=version_id, input=inputs)
            else:
                pred = client.predictions.create(model=model_name, input=inputs)
        except Exception as e:
            # Fallback: try resolve latest version id then retry
            try:
                if not REPLICATE_AVAILABLE:
                    raise Exception("Replicate –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
                self.log(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {model_name}\n")
                m = client.models.get(model_name)
                self.log(f"‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–ª—É—á–µ–Ω–∞\n")
                
                self.log(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏...\n")
                ver = next(iter(m.versions.list())).id
                self.log(f"‚úÖ –í–µ—Ä—Å–∏—è –ø–æ–ª—É—á–µ–Ω–∞: {ver}\n")
                
                self.log(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...\n")
                pred = client.predictions.create(version=ver, input=inputs)
                self._version_id = ver
                self.log(f"‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {pred.id}\n")
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {type(e).__name__}: {e}\n"
                self.log(error_msg)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                if "timeout" in str(e).lower():
                    self.log("‚è∞ –û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ - –≤–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n")
                elif "connection" in str(e).lower():
                    self.log("üåê –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n")
                elif "unauthorized" in str(e).lower():
                    self.log("üîê –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API —Ç–æ–∫–µ–Ω\n")
                else:
                    self.log(f"üîç –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}\n")
                
                raise
        self._current_pred = pred
        self.log(f"Prediction id: {pred.id}\n")
        self.log(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...\n")
        current_dir = os.getcwd()
        self.log(f"üîç –¢–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥: {current_dir}\n")
        self._start_time = time.time()
        self._status = "starting"
        # Prepare run dir for streaming artifacts under short hash
        ts = time.strftime("%Y%m%d_%H%M%S")
        
        # –ü–æ–ª—É—á–∞–µ–º SHA256 —Ö–µ—à Docker –æ–±—Ä–∞–∑–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ö–µ—à–∞ –ø–∞–ø–∫–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç hashlib
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é –∏ —Ö–µ—à, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∏–∑ App
        if hasattr(self, 'current_version') and hasattr(self, 'current_hash'):
            ver_for_hash = self.current_version
            forced_hash = self.current_hash
            
            self.log(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é –∏ —Ö–µ—à –∏–∑ App:\n")
            self.log(f"üîç version_id: {version_id}\n")
            self.log(f"üîç pred.version: {getattr(pred, 'version', 'None')}\n")
            self.log(f"üîç ver_for_hash: {ver_for_hash}\n")
            self.log(f"üîê –•–µ—à –∏–∑ App: {forced_hash}\n")
        else:
            # Fallback: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é –∏ —Ö–µ—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            try:
                ver_for_hash = self._extract_version_from_cog_yaml()
                if not ver_for_hash or ver_for_hash == "unknown":
                    ver_for_hash = self._determine_version_fallback()
                
                forced_hash = self.get_optimal_hash(ver_for_hash)
                if not forced_hash or forced_hash == "unknown":
                    import hashlib
                    hash_obj = hashlib.md5(ver_for_hash.encode())
                    forced_hash = hash_obj.hexdigest()[:8]
                
                self.log(f"üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n")
                self.log(f"üîç ver_for_hash: {ver_for_hash}\n")
                self.log(f"üîê forced_hash: {forced_hash}\n")
                
            except Exception as e:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ö–µ—à–∞: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback\n")
                import hashlib
                fallback_version = self._determine_version_fallback()
                hash_obj = hashlib.md5(fallback_version.encode())
                forced_hash = hash_obj.hexdigest()[:8]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        current_dir = os.getcwd()
        base_dir = os.path.join(current_dir, "replicate_runs", forced_hash)
        os.makedirs(base_dir, exist_ok=True)
        run_dir = os.path.join(base_dir, f"run_{ts}")
        os.makedirs(run_dir, exist_ok=True)
        self._current_run_dir = run_dir
        
        self.log(f"üîÑ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {run_dir}\n")
        self.log(f"üîÑ _current_run_dir —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self._current_run_dir}\n")
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏
        self.log(f"üîê –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —Å —Ö–µ—à–µ–º: {forced_hash}\n")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        self.log(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: {run_dir}\n")
        self.log(f"üîê –•–µ—à –≤–µ—Ä—Å–∏–∏: {forced_hash}\n")
        self.log(f"üîç –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞: {base_dir}\n")
        self.log(f"üîç –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {os.path.abspath(run_dir)}\n")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–∞
        if os.path.exists(run_dir):
            self.log(f"‚úÖ –ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n")
        else:
            self.log(f"‚ùå –û–®–ò–ë–ö–ê: –ü–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞!\n")
            # –°–æ–∑–¥–∞–µ–º fallback –ø–∞–ø–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ö–µ—à–µ–º
            current_dir = os.getcwd()
            fallback_dir = os.path.join(current_dir, "replicate_runs", forced_hash, f"run_{ts}")
            os.makedirs(fallback_dir, exist_ok=True)
            self._current_run_dir = fallback_dir
            self.log(f"üîÑ –°–æ–∑–¥–∞–Ω–∞ fallback –ø–∞–ø–∫–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ö–µ—à–µ–º: {fallback_dir}\n")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ö–µ—à–µ–º
            if os.path.exists(fallback_dir):
                self.log(f"‚úÖ Fallback –ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {fallback_dir}\n")
                self.log(f"üîê –•–µ—à –ø–∞–ø–∫–∏: {forced_hash}\n")
            else:
                self.log(f"‚ùå –û–®–ò–ë–ö–ê: Fallback –ø–∞–ø–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞!\n")

        t0 = time.time()
        started = False
        last_len = 0
        last_out_len = 0

        # Stream logs to file as they grow
        stream_logs_path = None
        while not self._stop_event.is_set():
            try:
                pred.reload()
                logs = pred.logs or ""
            except Exception as e:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ (—Ç–∞–π–º–∞—É—Ç—ã, —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏)
                error_msg = f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {type(e).__name__}: {e}\n"
                self.log(error_msg)
                
                # –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–π–º–∞—É—Ç, –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                if "timeout" in str(e).lower() or "readtimeout" in str(e).lower():
                    self.log("‚è≥ –¢–∞–π–º–∞—É—Ç API, –∂–¥–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...\n")
                    time.sleep(self.poll_s)
                    continue
                
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                self.log("üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏...\n")
                time.sleep(self.poll_s)
                continue
            if len(logs) > last_len:
                chunk = logs[last_len:]
                self.log(chunk)
                # append to file inside current run dir
                try:
                    if stream_logs_path is None and self._current_run_dir:
                        stream_logs_path = os.path.join(self._current_run_dir, "logs.txt")
                        # write header if file is new
                        if not os.path.exists(stream_logs_path):
                            with open(stream_logs_path, "w", encoding="utf-8") as f:
                                f.write(f"=== GENERATION START: {time.strftime('%Y-%m-%d %H:%M:%S')} ===\n")
                    if stream_logs_path:
                        with open(stream_logs_path, "a", encoding="utf-8") as f:
                            f.write(chunk)
                except Exception as e:
                    self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª: {type(e).__name__}: {e}\n")
                last_len = len(logs)

            # Stream outputs (preview/final/colormap) as they appear
            try:
                outs = pred.output
                if isinstance(outs, list) and len(outs) > last_out_len:
                    import requests  # type: ignore
                    for idx in range(last_out_len, len(outs)):
                        url = outs[idx]
                        try:
                            self.log(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {idx}: {url}\n")
                            r = requests.get(url, timeout=60)
                            r.raise_for_status()
                            name = f"out_{idx}"
                            path = os.path.join(self._current_run_dir or os.getcwd(), f"{name}.png")
                            with open(path, "wb") as f:
                                f.write(r.content)
                            self.log(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {path}\n")
                            try:
                                self.ui_queue.put_nowait(f"__IMG__::{name}::{path}")
                            except Exception as e:
                                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI: {e}\n")
                        except Exception as e:
                            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {idx}: {type(e).__name__}: {e}\n")
                            continue
                    last_out_len = len(outs)
            except Exception as e:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {type(e).__name__}: {e}\n")

            if not started:
                if self._is_boot_error(logs) and not self._is_boot_completed(logs):
                    self.log("\n‚ùå Boot error detected before startup completed. Cancelling prediction...\n")
                    try:
                        pred.cancel()
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}\n")
                    self._status = "failed"
                    return 2
                if pred.status in ("processing", "succeeded") or self._is_boot_completed(logs):
                    started = True
                    self.log("\n‚úÖ Startup phase completed. Proceeding to completion...\n")
                    self._status = "processing"
                elif time.time() - t0 > self.startup_timeout_s:
                    self.log("\n‚ùå Startup timeout exceeded. Cancelling prediction...\n")
                    try:
                        pred.cancel()
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}\n")
                    self._status = "timeout"
                    return 3

            if pred.status in ("succeeded", "failed", "canceled"):
                self.log(f"\n=== Final status: {pred.status}\n")
                if pred.status == "succeeded":
                    try:
                        self.log(json.dumps(pred.output, ensure_ascii=False, indent=2) + "\n")
                    except Exception:
                        self.log(str(pred.output) + "\n")
                    self._status = "succeeded"
                    self._save_outputs(pred, logs)
                    return 0
                self._status = pred.status
                self._save_outputs(pred, logs)
                return 1

            if time.time() - t0 > self.total_timeout_s:
                self.log("\n‚ùå Total timeout exceeded. Cancelling prediction...\n")
                try:
                    pred.cancel()
                except Exception as e:
                    self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}\n")
                self._status = "timeout"
                return 4

            time.sleep(self.poll_s)

        # Stop requested
        try:
            pred.cancel()
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}\n")
        self._status = "canceled"
        return 10

    def _save_outputs(self, pred, logs: str) -> None:
        self.log("üîÑ _save_outputs –≤—ã–∑–≤–∞–Ω\n")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É, —Å–æ–∑–¥–∞–Ω–Ω—É—é –≤ _run_single
        if not self._current_run_dir:
            self.log("‚ùå –û–®–ò–ë–ö–ê: _current_run_dir –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n")
            return
            
        run_dir = self._current_run_dir
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–µ
        self.log(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–∞–ø–∫—É: {run_dir}\n")
        self.log(f"üîê –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à: 89fdd926\n")
        self.log(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {self._current_run_dir}\n")
        # Save logs
        try:
            path = os.path.join(run_dir, "logs.txt")
            if not os.path.exists(path):
                with open(path, "w", encoding="utf-8") as f:
                    f.write(f"=== GENERATION START: {time.strftime('%Y-%m-%d %H:%M:%S')} ===\n")
            with open(path, "a", encoding="utf-8") as f:
                f.write(pred.logs or "")
                f.write(f"\n=== GENERATION FINISH: {time.strftime('%Y-%m-%d %H:%M:%S')} ===\n")
        except Exception:
            pass
        # Save compact JSON (prediction + inputs + env + perf) ‚Üí prediction.json
        try:
            env = {
                "torch": __import__("torch").__version__ if True else None,
                "diffusers": __import__("diffusers").__version__ if True else None,
                "cuda": __import__("torch").version.cuda if hasattr(__import__("torch"), "version") else None,
            }
            perf = {
                "ui_start_time": self._start_time,
                "ui_finish_time": time.time(),
            }
            pred_dict = {
                "id": getattr(pred, "id", None),
                "status": getattr(pred, "status", None),
                "model": getattr(pred, "model", None),
                "version": getattr(pred, "version", None),
                "input": getattr(pred, "input", None),
                "output": getattr(pred, "output", None),
                "error": getattr(pred, "error", None),
                "logs": None,  # –ª–æ–≥–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ logs.txt
                "env": env,
                "perf": perf,
                "created_at": getattr(pred, "created_at", None),
                "started_at": getattr(pred, "started_at", None),
                "completed_at": getattr(pred, "completed_at", None),
            }
            with open(os.path.join(run_dir, "prediction.json"), "w", encoding="utf-8") as f:
                json.dump(pred_dict, f, ensure_ascii=False, indent=2)
        except Exception:
            pass
        # Save startup logs to a separate file (if present in main logs)
        try:
            startup_log_path = os.path.join(run_dir, "startup.log.txt")
            full_logs = pred.logs or ""
            lines = full_logs.splitlines()
            
            # –ò—â–µ–º –±–ª–æ–∫ STARTUP_SNAPSHOT
            startup_lines = []
            in_snapshot = False
            for line in lines:
                if "üöÄ STARTUP_SNAPSHOT_START" in line:
                    in_snapshot = True
                    startup_lines.append(line)
                elif "üöÄ STARTUP_SNAPSHOT_END" in line:
                    startup_lines.append(line)
                    in_snapshot = False
                elif in_snapshot:
                    startup_lines.append(line)
            
            # –ï—Å–ª–∏ –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            if not startup_lines:
                startup_lines = [ln for ln in lines if "MODEL_START" in ln or "setup" in ln.lower()]
            
            with open(startup_log_path, "w", encoding="utf-8") as f:
                f.write("\n".join(startup_lines) + ("\n" if startup_lines else ""))
        except Exception:
            pass
        # Download outputs (preview/final/colormap) if present
        try:
            import requests  # type: ignore
            outs = pred.output
            if isinstance(outs, list):
                self.log(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(outs)} –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...\n")
                self.log(f"üìÅ –ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {run_dir}\n")
                
                files = []
                for idx, url in enumerate(outs):
                    try:
                        r = requests.get(url, timeout=60)
                        r.raise_for_status()
                        name = f"out_{idx}"
                        fp = os.path.join(run_dir, f"{name}.png")
                        with open(fp, "wb") as f:
                            f.write(r.content)
                        files.append(fp)
                        self.log(f"üì• –°–∫–∞—á–∞–Ω —Ñ–∞–π–ª {idx}: {name}.png\n")
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {idx}: {e}\n")
                        continue
                        
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥: –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
                # –ú–∞—Ä–∫–µ—Ä—ã –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ /tmp/ –ø—É—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å out_ —Ñ–∞–π–ª–∞–º–∏
                self.log(f"üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {len(files)}\n")
                
                # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ (–í–ê–†–ò–ê–ù–¢ –ë)
                prompt = ""
                if hasattr(pred, 'input') and isinstance(pred.input, dict):
                    prompt = str(pred.input.get('prompt', '')).replace(' ', '_').replace('%', 'pct')[:50]
                    if not prompt:
                        prompt = "unknown"
                else:
                    prompt = "unknown"
                
                self.log(f"üìù –ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: '{prompt}'\n")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
                timestamp = ""
                if hasattr(self, '_current_run_dir') and self._current_run_dir:
                    folder_name = os.path.basename(self._current_run_dir)
                    if folder_name.startswith('run_'):
                        timestamp = folder_name[4:]  # –£–±–∏—Ä–∞–µ–º 'run_' –∏–∑ –Ω–∞—á–∞–ª–∞
                        self.log(f"‚è∞ –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –∏–∑ –ø–∞–ø–∫–∏: {timestamp}\n")
                    else:
                        timestamp = time.strftime("%Y%m%d_%H%M%S")
                        self.log(f"‚è∞ –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞: {timestamp}\n")
                else:
                    timestamp = time.strftime("%Y%m%d_%H%M%S")
                    self.log(f"‚è∞ –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {timestamp}\n")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é –∏ —Ö–µ—à, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∏–∑ App
                if hasattr(self, 'current_version') and hasattr(self, 'current_hash'):
                    forced_hash = self.current_hash
                    self.log(f"üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –∏–∑ App: {forced_hash}\n")
                else:
                    # Fallback: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–µ—à –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                    if hasattr(self, '_version_id') and self._version_id:
                        ver_for_hash = self._version_id
                    else:
                        ver_for_hash = self._determine_version_fallback()
                    
                    forced_hash = self.get_optimal_hash(ver_for_hash)
                    if not forced_hash or forced_hash == "unknown":
                        import hashlib
                        hash_obj = hashlib.md5(ver_for_hash.encode())
                        forced_hash = hash_obj.hexdigest()[:8]
                    
                    self.log(f"üîê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ö–µ—à –≤–µ—Ä—Å–∏–∏: {forced_hash}\n")
                
                if len(files) >= 1:
                    try:
                        # –§–æ—Ä–º–∞—Ç: {timestamp}_{prompt}_{type}_{hash}.png
                        final_name = f"{timestamp}_{prompt}_final_{forced_hash}.png"
                        final_path = os.path.join(run_dir, final_name)
                        os.replace(files[0], final_path)
                        self.log(f"‚úÖ FINAL saved as: {final_name}\n")
                        self.log(f"üìÅ –ü—É—Ç—å: {final_path}\n")
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ final.png: {e}\n")
                if len(files) >= 2:
                    try:
                        # –§–æ—Ä–º–∞—Ç: {timestamp}_{prompt}_{type}_{hash}.png
                        colormap_name = f"{timestamp}_{prompt}_colormap_{forced_hash}.png"
                        colormap_path = os.path.join(run_dir, colormap_name)
                        os.replace(files[1], colormap_path)
                        self.log(f"üé® COLORMAP saved as: {colormap_name}\n")
                        self.log(f"üìÅ –ü—É—Ç—å: {colormap_path}\n")
                    except Exception as e:
                        self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–∞–ø–ø–∏–Ω–≥–∞ colormap.png: {e}\n")
        except Exception:
            pass

    def _update_image_preview(self, kind: str, path: str) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–±–µ–∑ PIL)"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
        if not hasattr(self, 'preview_label'):
            return
            
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (–í–ê–†–ò–ê–ù–¢ –ë)
            filename = os.path.basename(path)
            if kind == "preview":
                self.preview_label.configure(text=f"Preview: {filename}")
            elif kind == "final":
                self.final_label.configure(text=f"Final: {filename}")
            elif kind == "colormap":
                self.colormap_label.configure(text=f"Colormap: {filename}")
                
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            self.log(f"üñºÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–µ–≤—å—é {kind}: {filename}\n")
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–≤—å—é {kind}: {e}\n")

    def run_presets(self, preset_items: List[Dict[str, Any]]):
        self.log("üîÑ run_presets() –≤—ã–∑–≤–∞–Ω\n")
        try:
            import replicate  # type: ignore
        except ImportError:
            self.log("‚ùå –ú–æ–¥—É–ª—å 'replicate' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n")
            self.log("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install replicate\n")
            return
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ replicate: {e}\n")
            return

        client = replicate.Client(api_token=self.api_token)

        for item in preset_items:
            if self._stop_event.is_set():
                break
            name = item.get("name", "preset")
            inputs = item.get("inputs", {})
            self.log(f"\n################ PRESET: {name} ################\n")
            self._run_single(client, inputs)

        self.log("\n[GUI] Done.\n")

    def start(self, preset_items: List[Dict[str, Any]]):
        if self.is_running():
            return
        self._stop_event.clear()
        self._thread = threading.Thread(target=self.run_presets, args=(preset_items,), daemon=True)
        self._thread.start()
        self.log("üîÑ Worker.start() –≤—ã–∑–≤–∞–Ω, –ø–æ—Ç–æ–∫ –∑–∞–ø—É—â–µ–Ω\n")


class App:
    def __init__(self, root: tk.Tk):
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è App...")
        self.root = root
        root.title("Replicate Test Runner - –≤–µ—Ä—Å–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        root.geometry("1600x1000")  # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –µ—â–µ —à–∏—Ä–µ –∏ –≤—ã—à–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

        self.ui_queue: "queue.Queue[str]" = queue.Queue()
        self.controls_locked: bool = False
        
        # –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        self.current_version = "v4.5.01"  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º v4.5.01
        self.current_hash = "unknown"     # –•–µ—à –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –∏ —Ö–µ—à –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤)

        # Top frame controls
        top = ttk.Frame(root)
        top.pack(fill=tk.X, padx=8, pady=8)

        ttk.Label(top, text="Model:").grid(row=0, column=0, sticky=tk.W)
        self.model_var = tk.StringVar(value="nauslava/plitka-pro-project")
        self.model_entry = ttk.Entry(top, textvariable=self.model_var, width=60)
        self.model_entry.grid(row=0, column=1, sticky=tk.W, padx=6)

        ttk.Label(top, text="Version ID:").grid(row=0, column=2, sticky=tk.W)
        self.version_var = tk.StringVar(value="")
        ttk.Entry(top, textvariable=self.version_var, width=80)
        self.version_entry = ttk.Entry(top, textvariable=self.version_var, width=80)
        self.version_entry.grid(row=0, column=3, columnspan=2, sticky=tk.W, padx=6)

        ttk.Label(top, text="Poll (s):").grid(row=1, column=0, sticky=tk.W)
        self.poll_var = tk.IntVar(value=6)
        ttk.Entry(top, textvariable=self.poll_var, width=6).grid(row=1, column=1, sticky=tk.W, padx=6)

        ttk.Label(top, text="Startup (s):").grid(row=1, column=2, sticky=tk.W)
        self.startup_var = tk.IntVar(value=7 * 60)
        ttk.Entry(top, textvariable=self.startup_var, width=8).grid(row=1, column=3, sticky=tk.W, padx=6)

        ttk.Label(top, text="Total (s):").grid(row=1, column=4, sticky=tk.W)
        self.total_var = tk.IntVar(value=25 * 60)
        ttk.Entry(top, textvariable=self.total_var, width=8).grid(row=1, column=5, sticky=tk.W, padx=6)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
        ttk.Label(top, text="Current Version:").grid(row=2, column=0, sticky=tk.W)
        self.version_label = ttk.Label(top, text=self.current_version, font=("Arial", 10, "bold"), foreground="blue")
        self.version_label.grid(row=2, column=1, sticky=tk.W, padx=6)
        
        ttk.Label(top, text="Hash:").grid(row=2, column=2, sticky=tk.W)
        self.hash_label = ttk.Label(top, text=self.current_hash, font=("Arial", 10, "bold"), foreground="green")
        self.hash_label.grid(row=2, column=3, sticky=tk.W, padx=6)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
        refresh_btn = ttk.Button(top, text="üîÑ Refresh Version", command=self.update_version_info)
        refresh_btn.grid(row=2, column=4, sticky=tk.W, padx=6)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ (–µ—Å–ª–∏ replicate –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
        if not REPLICATE_AVAILABLE:
            demo_btn = ttk.Button(top, text="üé≠ Demo Mode", command=self.run_demo)
            demo_btn.grid(row=2, column=5, sticky=tk.W, padx=6)

        # Presets
        mid = ttk.Frame(root)
        mid.pack(fill=tk.BOTH, expand=True, padx=8, pady=4)

        left = ttk.Frame(mid)
        left.pack(side=tk.LEFT, fill=tk.Y)

        ttk.Label(left, text="Presets").pack(anchor=tk.W)
        self.listbox = tk.Listbox(left, selectmode=tk.EXTENDED, height=15, width=60, font=("Arial", 9))
        self.listbox.pack(fill=tk.Y, expand=False)
        
        # –û–±–ª–∞—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
        ttk.Label(left, text="Preset Parameters", font=("Arial", 10, "bold")).pack(anchor=tk.W, pady=(8,2))
        self.preset_params_text = tk.Text(left, height=30, width=60, wrap=tk.WORD, state=tk.DISABLED, font=("Arial", 8))
        self.preset_params_text.pack(fill=tk.X, expand=False, pady=(0,6))

        # Buttons
        btns = ttk.Frame(left)
        btns.pack(fill=tk.X, pady=6)
        self.start_btn = ttk.Button(btns, text="Start", command=self.on_start)
        self.start_btn.pack(side=tk.LEFT, padx=4)
        self.stop_btn = ttk.Button(btns, text="Stop", command=self.on_stop)
        self.stop_btn.pack(side=tk.LEFT, padx=4)
        self.close_btn = ttk.Button(btns, text="Close", command=self.on_close)
        self.close_btn.pack(side=tk.LEFT, padx=4)

        right = ttk.Frame(mid)
        right.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        # Status + timer
        status_row = ttk.Frame(right)
        status_row.pack(fill=tk.X)
        ttk.Label(status_row, text="Status:").pack(side=tk.LEFT)
        self.status_var = tk.StringVar(value="idle")
        self.status_label = ttk.Label(status_row, textvariable=self.status_var)
        self.status_label.pack(side=tk.LEFT, padx=6)
        ttk.Label(status_row, text="Elapsed:").pack(side=tk.LEFT, padx=12)
        self.elapsed_var = tk.StringVar(value="00:00")
        self.elapsed_label = ttk.Label(status_row, textvariable=self.elapsed_var)
        self.elapsed_label.pack(side=tk.LEFT)

        # Preview area
        img_frame = ttk.Frame(right)
        img_frame.pack(fill=tk.X, pady=(6,4))
        self.preview_label = ttk.Label(img_frame, text="Preview")
        self.preview_label.pack(side=tk.LEFT, padx=6)
        self.final_label = ttk.Label(img_frame, text="Final")
        self.final_label.pack(side=tk.LEFT, padx=6)
        self.colormap_label = ttk.Label(img_frame, text="Colormap")
        self.colormap_label.pack(side=tk.LEFT, padx=6)

        ttk.Label(right, text="Logs").pack(anchor=tk.W, pady=(6,0))
        self.text = tk.Text(right, wrap=tk.WORD, state=tk.DISABLED)
        self.text.pack(fill=tk.BOTH, expand=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ replicate_runs
        current_dir = os.getcwd()
        replicate_runs_dir = os.path.join(current_dir, "replicate_runs")
        if not os.path.exists(replicate_runs_dir):
            os.makedirs(replicate_runs_dir, exist_ok=True)
            self.append_log(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ replicate_runs: {replicate_runs_dir}\n")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è –≤–µ—Ä—Å–∏–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ö–µ—à –≤–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        forced_hash = self.current_hash
        
        hash_dir = os.path.join(replicate_runs_dir, forced_hash)
        if not os.path.exists(hash_dir):
            os.makedirs(hash_dir, exist_ok=True)
            self.append_log(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –≤–µ—Ä—Å–∏–∏ —Å —Ö–µ—à–µ–º: {forced_hash}\n")
            self.append_log(f"üìÅ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: {os.path.abspath(hash_dir)}\n")
        
        # Load presets based on current version
        self.presets_path = self._get_presets_path_for_version()
        try:
            self.presets = read_presets(self.presets_path)
            self.append_log(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–µ—Å–µ—Ç—ã –∏–∑: {os.path.basename(self.presets_path)}\n")
        except Exception as e:
            self.presets = {}
            self.append_log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤: {e}\n")

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–µ—Å–µ—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        self.append_log("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ—Å–µ—Ç–æ–≤...\n")
        valid_presets = 0
        total_presets = len(self.presets)
        
        for name, preset_data in self.presets.items():
            is_valid, errors = self.validate_preset(name, preset_data, self.current_version)
            if is_valid:
                valid_presets += 1
                self.listbox.insert(tk.END, name)
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –ø—Ä–µ—Å–µ—Ç —Å –ø–æ–º–µ—Ç–∫–æ–π
                self.listbox.insert(tk.END, f"‚ùå {name}")
                self.append_log(f"‚ö†Ô∏è –ü—Ä–µ—Å–µ—Ç '{name}' —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏:\n")
                for error in errors:
                    self.append_log(f"  {error}\n")
        
        self.append_log(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {valid_presets}/{total_presets} –ø—Ä–µ—Å–µ—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã\n")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–î–û –ø–µ—Ä–≤–æ–≥–æ append_log)
        self._create_temp_logs_dir()
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ—Å–µ—Ç–∞
        self.listbox.bind('<<ListboxSelect>>', self.on_preset_select)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –¥–ª—è GUI –≤ –µ–¥–∏–Ω–æ–π –ø–∞–ø–∫–µ gui_logs
        # (–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –≤ update_version_info)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
        current_dir = os.getcwd()
        self.append_log(f"üöÄ Plitka Pro {self.current_version} –∑–∞–ø—É—â–µ–Ω\n")
        self.append_log(f"üîê –•–µ—à –ø–∞–ø–∫–∏: {self.current_hash}\n")
        self.append_log(f"üìÅ –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: replicate_runs/{self.current_hash}/run_YYYYMMDD_HHMMSS/\n")
        self.append_log(f"üîç –†–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥: {current_dir}\n")
        self.append_log("=" * 60 + "\n")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ —Å –≤–µ—Ä—Å–∏–µ–π
        self.root.title(f"Replicate Test Runner - {self.current_version} ({self.current_hash})")

        # Worker
        token = load_env_token()
        if not token:
            self.append_log("WARNING: REPLICATE_API_TOKEN is not set. Enter it below or export it / put into .env.\n")

        # Token entry
        token_frame = ttk.Frame(root)
        token_frame.pack(fill=tk.X, padx=8)
        ttk.Label(token_frame, text="API Token:").pack(side=tk.LEFT)
        self.token_var = tk.StringVar(value=token or "")
        self.token_entry = ttk.Entry(token_frame, textvariable=self.token_var, width=60, show="*")
        self.token_entry.pack(side=tk.LEFT, padx=6, fill=tk.X, expand=True)
        # –°–æ–∑–¥–∞–µ–º worker
        self.worker = ReplicateWorker(
            api_token=token or "",
            model_ref=self.model_var.get(),
            poll_s=self.poll_var.get(),
            startup_timeout_s=self.startup_var.get(),
            total_timeout_s=self.total_var.get(),
            ui_queue=self.ui_queue,
            version_id=self.version_var.get().strip() or None,
        )
        
        def save_token():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
            if not hasattr(self, 'text'):
                return
                
            val = self.token_var.get().strip()
            if not val:
                messagebox.showwarning("Token", "Token is empty")
                return
            # Update env for this process
            os.environ["REPLICATE_API_TOKEN"] = val
            self.worker.api_token = val
            # Persist to .env
            try:
                env_path = os.path.join(os.getcwd(), ".env")
                lines = []
                if os.path.exists(env_path):
                    with open(env_path, "r", encoding="utf-8") as f:
                        lines = f.read().splitlines()
                    lines = [ln for ln in lines if not ln.startswith("REPLICATE_API_TOKEN=")]
                lines.append(f"REPLICATE_API_TOKEN={val}")
                with open(env_path, "w", encoding="utf-8") as f:
                    f.write("\n".join(lines) + "\n")
                self.append_log("[GUI] Token saved to .env\n")
            except Exception as e:
                self.append_log(f"[GUI] Failed to save token: {e}\n")
        ttk.Button(token_frame, text="Save", command=save_token).pack(side=tk.LEFT, padx=6)
        
        # Auto-bind token field changes to worker (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ .env)
        self.token_var.trace_add("write", lambda *_: setattr(self.worker, "api_token", self.token_var.get().strip()))

        # Periodic UI updates
        self.root.after(300, self.drain_queue)
        self.root.after(1000, self.update_timer)
        # Update worker config when fields change
        self.model_var.trace_add("write", lambda *_: setattr(self.worker, "model_ref", self.model_var.get()))
        self.version_var.trace_add("write", lambda *_: setattr(self.worker, "_version_id", (self.version_var.get().strip() or None)))
        self.poll_var.trace_add("write", lambda *_: setattr(self.worker, "poll_s", int(self.poll_var.get())))
        self.startup_var.trace_add("write", lambda *_: setattr(self.worker, "startup_timeout_s", int(self.startup_var.get())))
        self.total_var.trace_add("write", lambda *_: setattr(self.worker, "total_timeout_s", int(self.total_var.get())))
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Ä—Å–∏—é –≤ worker –ø–æ—Å–ª–µ –µ—ë –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        def update_worker_version():
            if hasattr(self, 'current_version') and hasattr(self, 'current_hash'):
                self.worker.current_version = self.current_version
                self.worker.current_hash = self.current_hash

        self.root.protocol("WM_DELETE_WINDOW", self.on_close)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –∏ —Ö–µ—à –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
        print("üîÑ –í—ã–∑–æ–≤ update_version_info...")
        self.update_version_info()
        print("‚úÖ App –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def append_log(self, text: str) -> None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
        if not hasattr(self, 'text'):
            return
            
        self.text.configure(state=tk.NORMAL)
        self.text.insert(tk.END, text)
        self.text.see(tk.END)
        self.text.configure(state=tk.DISABLED)
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª
        self._save_logs_to_file(text)
    
    def _save_logs_to_file(self, text: str) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        try:
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ø–∞–ø–∫–∞ GUI –ª–æ–≥–æ–≤ (–µ–¥–∏–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –≤—Å–µ–π —Å–µ—Å—Å–∏–∏)
            if hasattr(self, '_gui_logs_dir') and self._gui_logs_dir:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ (–¥–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è)
                session_log_file = os.path.join(self._gui_logs_dir, "gui_session.log.txt")
                log_file = session_log_file
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ø–∞–ø–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Ç–µ—Å—Ç–∞
            elif hasattr(self, '_current_run_dir') and self._current_run_dir:
                log_file = os.path.join(self._current_run_dir, "gui_logs.txt")
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ø–∞–ø–∫–∞ worker'–∞
            elif hasattr(self, 'worker') and self.worker and hasattr(self.worker, '_current_run_dir') and self.worker._current_run_dir:
                log_file = os.path.join(self.worker._current_run_dir, "gui_logs.txt")
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –ª–æ–≥–æ–≤
            elif hasattr(self, '_temp_logs_dir') and self._temp_logs_dir:
                log_file = os.path.join(self._temp_logs_dir, "temp_session.log.txt")
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5: fallback –Ω–∞ –ø–∞–ø–∫—É GUI –ª–æ–≥–æ–≤
            else:
                current_dir = os.getcwd()
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ö–µ—à –≤–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
                if hasattr(self, 'current_hash'):
                    log_file = os.path.join(current_dir, "replicate_runs", self.current_hash, "gui_logs", "gui_session.log.txt")
                    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É GUI –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                    os.makedirs(os.path.dirname(log_file), exist_ok=True)
                else:
                    # –ï—Å–ª–∏ —Ö–µ—à –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                    temp_logs_dir = os.path.join(current_dir, "replicate_runs", "temp_logs")
                    os.makedirs(temp_logs_dir, exist_ok=True)
                    log_file = os.path.join(temp_logs_dir, "temp_session.log.txt")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
            log_entry = f"[{timestamp}] {text}"
            
            with open(log_file, "a", encoding="utf-8") as f:
                f.write(log_entry)
                
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤
            pass
    
    def _create_log_file(self) -> None:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ (–ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤ worker'–µ)"""
        try:
            # –ü–∞–ø–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤ worker'–µ, –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º
            self.append_log(f"üìù –ü–∞–ø–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤ worker'–µ\n")
            self.append_log(f"üîê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ö–µ—à: {self.current_hash}\n")
            
        except Exception as e:
            self.append_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}\n")
    
    def _create_temp_logs_dir(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            current_dir = os.getcwd()
            temp_logs_dir = os.path.join(current_dir, "replicate_runs", "temp_logs")
            os.makedirs(temp_logs_dir, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
            temp_session_file = os.path.join(temp_logs_dir, "temp_session.log.txt")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            with open(temp_session_file, "w", encoding="utf-8") as f:
                f.write(f"=== TEMP GUI SESSION LOG: {time.strftime('%Y-%m-%d %H:%M:%S')} ===\n")
                f.write(f"üöÄ –í–µ—Ä—Å–∏—è: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º...\n")
                f.write(f"üîê –•–µ—à: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º...\n")
                f.write(f"üìÅ –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞: {temp_logs_dir}\n")
                f.write("=" * 60 + "\n\n")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ
            self._temp_logs_dir = temp_logs_dir
            
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏
            pass
    
    def _create_gui_log_file(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –¥–ª—è GUI –≤ –µ–¥–∏–Ω–æ–π –ø–∞–ø–∫–µ"""
        try:
            current_dir = os.getcwd()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –∏ —Ö–µ—à–∞
            if not hasattr(self, 'current_version') or not hasattr(self, 'current_hash'):
                return  # –ù–µ —Å–æ–∑–¥–∞–µ–º –ª–æ–≥–∏ –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º current_hash –≤–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
            gui_logs_dir = os.path.join(current_dir, "replicate_runs", self.current_hash, "gui_logs")
            os.makedirs(gui_logs_dir, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –∑–∞–ø—É—Å–∫–∞ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è)
            startup_log_file = os.path.join(gui_logs_dir, "gui_startup.log.txt")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            with open(startup_log_file, "w", encoding="utf-8") as f:
                f.write(f"=== GUI STARTUP LOG: {time.strftime('%Y-%m-%d %H:%M:%S')} ===\n")
                f.write(f"üöÄ –í–µ—Ä—Å–∏—è: {self.current_version}\n")
                f.write(f"üîê –•–µ—à: {self.current_hash}\n")
                f.write(f"üìÅ –ü–∞–ø–∫–∞: {gui_logs_dir}\n")
                f.write("=" * 60 + "\n\n")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ (–¥–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è)
            session_log_file = os.path.join(gui_logs_dir, "gui_session.log.txt")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ—Å—Å–∏–∏
            with open(session_log_file, "w", encoding="utf-8") as f:
                f.write(f"=== GUI SESSION LOG: {time.strftime('%Y-%m-%d %H:%M:%S')} ===\n")
                f.write(f"üöÄ –í–µ—Ä—Å–∏—è: {self.current_version}\n")
                f.write(f"üîê –•–µ—à: {self.current_hash}\n")
                f.write(f"üìÅ –ü–∞–ø–∫–∞: {gui_logs_dir}\n")
                f.write("=" * 60 + "\n\n")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ GUI –ª–æ–≥–æ–≤
            self._gui_logs_dir = gui_logs_dir
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ª–æ–≥–∏ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é
            if hasattr(self, '_temp_logs_dir') and self._temp_logs_dir:
                try:
                    temp_session_file = os.path.join(self._temp_logs_dir, "temp_session.log.txt")
                    if os.path.exists(temp_session_file):
                        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                        with open(temp_session_file, "r", encoding="utf-8") as f:
                            temp_content = f.read()
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
                        with open(session_log_file, "a", encoding="utf-8") as f:
                            f.write("\n" + "=" * 60 + "\n")
                            f.write("–õ–û–ì–ò –î–û –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –í–ï–†–°–ò–ò:\n")
                            f.write("=" * 60 + "\n")
                            f.write(temp_content)
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
                        import shutil
                        shutil.rmtree(self._temp_logs_dir)
                        self._temp_logs_dir = None
                        
                        self.append_log(f"‚úÖ –õ–æ–≥–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏\n")
                except Exception as e:
                    self.append_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}\n")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
            self.append_log(f"üìÅ –õ–æ–≥–∏ GUI: {gui_logs_dir}\n")
            
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
            pass
    
    def _create_stop_log_file(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤ –≤ –µ–¥–∏–Ω–æ–π –ø–∞–ø–∫–µ"""
        try:
            if hasattr(self, '_gui_logs_dir') and self._gui_logs_dir:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É GUI –ª–æ–≥–æ–≤
                log_file = os.path.join(self._gui_logs_dir, "gui_stop.log.txt")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
                with open(log_file, "w", encoding="utf-8") as f:
                    f.write(f"=== GUI STOP LOG: {time.strftime('%Y-%m-%d %H:%M:%S')} ===\n")
                    f.write(f"üöÄ –í–µ—Ä—Å–∏—è: {self.current_version}\n")
                    f.write(f"üîê –•–µ—à: {self.current_hash}\n")
                    f.write(f"üîê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ö–µ—à: {self.current_hash}\n")
                    f.write(f"üìÅ –ü–∞–ø–∫–∞: {self._gui_logs_dir}\n")
                    f.write("=" * 60 + "\n\n")
                    f.write("–¢–µ—Å—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n")
                
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
            pass
    
    def _create_close_log_file(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è GUI –≤ –µ–¥–∏–Ω–æ–π –ø–∞–ø–∫–µ"""
        try:
            if hasattr(self, '_gui_logs_dir') and self._gui_logs_dir:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É GUI –ª–æ–≥–æ–≤
                log_file = os.path.join(self._gui_logs_dir, "gui_close.log")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
                with open(log_file, "w", encoding="utf-8") as f:
                    f.write(f"=== GUI CLOSE LOG: {time.strftime('%Y-%m-%d %H:%M:%S')} ===\n")
                    f.write(f"üöÄ –í–µ—Ä—Å–∏—è: {self.current_version}\n")
                    f.write(f"üîê –•–µ—à: {self.current_hash}\n")
                    f.write(f"üîê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ö–µ—à: {self.current_hash}\n")
                    f.write(f"üìÅ –ü–∞–ø–∫–∞: {self._gui_logs_dir}\n")
                    f.write("=" * 80 + "\n\n")
                    f.write("GUI –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n")
                
        except Exception as e:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
            pass
    
    def _get_presets_path_for_version(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–µ—Å–µ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é
            version = self._extract_version_from_cog_yaml()
            if not version:
                version = self._determine_version_fallback()
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º v4.5.01 –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
            if not version or version == "unknown":
                version = "v4.5.01"
                self.append_log(f"‚ö†Ô∏è –í–µ—Ä—Å–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º {version}\n")
            
            # –ú–∞–ø–ø–∏–Ω–≥ –≤–µ—Ä—Å–∏–π –∫ —Ñ–∞–π–ª–∞–º –ø—Ä–µ—Å–µ—Ç–æ–≤
            version_mapping = {
                "v4.5.01": "test_inputs_v4.5.01_critical_fixes.json",  # Critical Architecture Fixes
                "v4.4.61": "test_inputs_v4.4.61_extended.json",  # Multimodal ControlNet + Production Ready
                "v4.4.60": "test_inputs_v4.4.60_extended.json",  # Extended testing
                "v4.4.59": "test_inputs_v4.4.59.json",  # Previous version
                "v4.4.58": "test_inputs_v4.4.58.json",  # Previous version
                "v4.4.56": "test_inputs_v4.4.56.json",  # Color Grid Adapter + ControlNet
                "v4.4.45": "test_inputs_v4.4.45.json",  # –£–ª—É—á—à–µ–Ω–Ω–∞—è LoRA –∑–∞–≥—Ä—É–∑–∫–∞
                "v4.4.39": "test_inputs_v4.4.39.json",  # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
            }
            
            # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ –∏–ª–∏ "unknown", –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º v4.5.01
            if version not in version_mapping or version == "unknown":
                self.append_log(f"‚ö†Ô∏è –í–µ—Ä—Å–∏—è {version} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º v4.5.01\n")
                version = "v4.5.01"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤–µ—Ä—Å–∏–∏
            filename = version_mapping.get(version, "test_inputs_v4.5.01_critical_fixes.json")
            presets_path = os.path.join(os.path.dirname(__file__), filename)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if os.path.exists(presets_path):
                return presets_path
            else:
                # Fallback –∫ —Ñ–∞–π–ª—É v4.5.01
                fallback_path = os.path.join(os.path.dirname(__file__), "test_inputs_v4.5.01_critical_fixes.json")
                if os.path.exists(fallback_path):
                    self.append_log(f"‚ö†Ô∏è –§–∞–π–ª –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è –≤–µ—Ä—Å–∏–∏ {version} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π\n")
                    return fallback_path
                else:
                    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –ø—Ä–µ—Å–µ—Ç–æ–≤
                    empty_presets = {"default": {"prompt": "100% red", "seed": 12345, "steps": 20, "guidance": 7.0, "lora_scale": 0.7, "use_controlnet": false, "description": "–ë–∞–∑–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç"}}
                    with open(fallback_path, 'w', encoding='utf-8') as f:
                        import json
                        json.dump(empty_presets, f, indent=2, ensure_ascii=False)
                    self.append_log(f"üìÅ –°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª –ø—Ä–µ—Å–µ—Ç–æ–≤: {fallback_path}\n")
                    return fallback_path
                    
        except Exception as e:
            self.append_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –ø—Ä–µ—Å–µ—Ç–∞–º: {e}\n")
            # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É —Ñ–∞–π–ª—É
            return os.path.join(os.path.dirname(__file__), "test_inputs_v4.4.39.json")
    
    def _reload_presets_for_version(self) -> None:
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ—Å–µ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏"""
        try:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ—Å–µ—Ç–æ–≤
            self.listbox.delete(0, tk.END)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—É—Ç—å –∫ –ø—Ä–µ—Å–µ—Ç–∞–º
            new_presets_path = self._get_presets_path_for_version()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ—Å–µ—Ç—ã
            if new_presets_path != self.presets_path:
                self.presets_path = new_presets_path
                self.presets = read_presets(self.presets_path)
                self.append_log(f"üîÑ –ü—Ä–µ—Å–µ—Ç—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –≤–µ—Ä—Å–∏–∏ {self.current_version}\n")
                self.append_log(f"üìÅ –ù–æ–≤—ã–π —Ñ–∞–π–ª: {os.path.basename(self.presets_path)}\n")
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Å–µ—Ç—ã
            self.append_log("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏...\n")
            valid_presets = 0
            total_presets = len(self.presets)
            
            for name, preset_data in self.presets.items():
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                is_valid, errors = self.validate_preset(name, preset_data, self.current_version)
                if is_valid:
                    valid_presets += 1
                    self.listbox.insert(tk.END, f"‚úÖ {name}")
                else:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–æ–∫
                    critical_errors = [e for e in errors if e.startswith("‚ùå")]
                    warnings = [e for e in errors if e.startswith("‚ö†Ô∏è")]
                    
                    if critical_errors:
                        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                        self.listbox.insert(tk.END, f"‚ùå {name}")
                    else:
                        # –¢–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                        self.listbox.insert(tk.END, f"‚ö†Ô∏è {name}")
                    
                    self.append_log(f"‚ö†Ô∏è –ü—Ä–µ—Å–µ—Ç '{name}' —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏:\n")
                    for error in errors:
                        self.append_log(f"  {error}\n")
            
            self.append_log(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {valid_presets}/{total_presets} –ø—Ä–µ—Å–µ—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã\n")
            
            # –û—á–∏—â–∞–µ–º –æ–±–ª–∞—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–µ—Å–µ—Ç–∞
            if hasattr(self, 'preset_params_text'):
                self.preset_params_text.config(state=tk.NORMAL)
                self.preset_params_text.delete(1.0, tk.END)
                self.preset_params_text.config(state=tk.DISABLED)
                
        except Exception as e:
            self.append_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤: {e}\n")
    
    def _load_color_table(self) -> list[str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ü–≤–µ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ colors_table.txt"""
        try:
            color_file = os.path.join(os.path.dirname(__file__), "..", "colors_table.txt")
            if not os.path.exists(color_file):
                # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ü–≤–µ—Ç–∞–º
                return ["RED", "BLUE", "GREEN", "YELLOW", "ORANGE", "PINK", "WHITE", "BLACK", "GRAY", "BROWN"]
            
            with open(color_file, "r", encoding="utf-8") as f:
                colors = [line.strip().upper() for line in f if line.strip()]
            return colors
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ü–≤–µ—Ç–æ–≤: {e}")
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ü–≤–µ—Ç–∞–º
            return ["RED", "BLUE", "GREEN", "YELLOW", "ORANGE", "PINK", "WHITE", "BLACK", "GRAY", "BROWN"]
    
    def validate_preset(self, preset_name: str, preset_data: dict, version: str = None) -> tuple[bool, list[str]]:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–µ—Å–µ—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
        errors = []
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ü–≤–µ—Ç–æ–≤
        valid_colors = self._load_color_table()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if version is None:
            version = getattr(self, 'current_version', 'v4.5.01')
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ prompt
            if 'prompt' not in preset_data:
                errors.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'prompt'")
                return False, errors
            
            prompt = preset_data['prompt']
            
            # –ü–∞—Ä—Å–∏–º —Ü–≤–µ—Ç–∞ –∏ –∏—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è (—É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã <s0><s1>)
            # –£–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–≤–µ—Ç–æ–≤
            clean_prompt = prompt.replace('ohwx_rubber_tile', '').replace('<s0><s1>', '').strip()
            # –£–±–∏—Ä–∞–µ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ü–≤–µ—Ç–∞–º–∏
            clean_prompt = clean_prompt.replace('rubber tile', '').replace('high quality', '').replace('realistic texture', '').replace('grid pattern', '').replace('random pattern', '').replace('radial pattern', '').replace('granular pattern', '').strip()
            color_parts = [p.strip() for p in clean_prompt.split(',') if p.strip() and '%' in p]
            colors = []
            total_percentage = 0
            
            for part in color_parts:
                try:
                    if '%' in part:
                        percent_str, color_name = part.split('%', 1)
                        percent = float(percent_str.strip())
                        color_name = color_name.strip()
                        
                        if percent < 0 or percent > 100:
                            errors.append(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è {color_name}: {percent}%")
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–≤–µ—Ç –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ
                        if color_name.upper() not in valid_colors:
                            errors.append(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç '{color_name}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞: {', '.join(valid_colors[:10])}...")
                            continue
                        
                        colors.append({"name": color_name, "percentage": percent})
                        total_percentage += percent
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ 100%
                        color_name = part.strip()
                        if color_name.upper() not in valid_colors:
                            errors.append(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ü–≤–µ—Ç '{color_name}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞: {', '.join(valid_colors[:10])}...")
                            continue
                        colors.append({"name": color_name, "percentage": 100})
                        total_percentage = 100
                        break
                except Exception as e:
                    errors.append(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ '{part}': {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ (–±–æ–ª–µ–µ –º—è–≥–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            if len(colors) > 5:
                errors.append(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ü–≤–µ—Ç–æ–≤: {len(colors)} (–º–∞–∫—Å–∏–º—É–º: 5)")
            elif len(colors) > 4:
                errors.append(f"‚ö†Ô∏è –ú–Ω–æ–≥–æ —Ü–≤–µ—Ç–æ–≤: {len(colors)} (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: –¥–æ 4)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
            if total_percentage != 100:
                errors.append(f"‚ùå –°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–µ —Ä–∞–≤–Ω–∞ 100%: {total_percentage}%")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–∞–¥–∞–ø—Ç–∏–≤–Ω–æ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π)
            # –î–ª—è v4.5.01 –∏ –Ω–æ–≤–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
            if compare_versions(version, "v4.5.01") >= 0:
                required_fields = ['seed', 'num_inference_steps', 'guidance_scale']
                optional_fields = ['colormap', 'granule_size', 'negative_prompt']
            else:
                # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è
                required_fields = ['seed', 'steps', 'guidance', 'lora_scale']
                optional_fields = ['use_controlnet', 'description']
            
            for field in required_fields:
                if field not in preset_data:
                    errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
            for field in optional_fields:
                if field not in preset_data:
                    errors.append(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}'")
            
            return len(errors) == 0, errors
            
        except Exception as e:
            errors.append(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False, errors
    
    def on_preset_select(self, event) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã
            selection = self.listbox.curselection()
            if not selection:
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
            if len(selection) == 1:
                # –û–¥–∏–Ω –ø—Ä–µ—Å–µ—Ç –≤—ã–±—Ä–∞–Ω
                selected_index = selection[0]
                preset_name = self.listbox.get(selected_index)
                self._display_single_preset(preset_name)
            else:
                # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ—Å–µ—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–æ
                self._display_multiple_presets(selection)
                
        except Exception as e:
            self.append_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–µ—Å–µ—Ç–∞: {e}\n")
    
    def _display_single_preset(self, preset_name: str) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–¥–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞"""
        try:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã ‚úÖ, ‚ùå, ‚ö†Ô∏è –µ—Å–ª–∏ –µ—Å—Ç—å
            clean_name = preset_name.replace("‚úÖ ", "").replace("‚ùå ", "").replace("‚ö†Ô∏è ", "")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–µ—Å–µ—Ç–∞
            if clean_name in self.presets:
                preset_data = self.presets[clean_name]
                
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–µ—Å–µ—Ç
                is_valid, validation_errors = self.validate_preset(clean_name, preset_data, self.current_version)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                params_text = f"üìã Preset: {clean_name}\n"
                params_text += "=" * 50 + "\n\n"
                
                # –°—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                if is_valid:
                    params_text += "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: –ü–†–ï–°–ï–¢ –ö–û–†–†–ï–ö–¢–ï–ù\n\n"
                else:
                    params_text += "‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è: –û–®–ò–ë–ö–ò –û–ë–ù–ê–†–£–ñ–ï–ù–´\n"
                    for error in validation_errors:
                        params_text += f"  {error}\n"
                    params_text += "\n"
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –í–°–ï –ø–æ–ª—è –∏–∑ –ø—Ä–µ—Å–µ—Ç–∞
                params_text += "üîç –í–°–ï –î–ê–ù–ù–´–ï –ü–†–ï–°–ï–¢–ê:\n"
                params_text += "-" * 30 + "\n"
                
                for key, value in preset_data.items():
                    if isinstance(value, str) and len(value) > 60:
                        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                        display_value = value[:57] + "..."
                    else:
                        display_value = str(value)
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–ª—é—á –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    formatted_key = key.replace('_', ' ').title()
                    params_text += f"‚Ä¢ {formatted_key}: {display_value}\n"
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–≤–µ—Ç–∞—Ö
                if 'prompt' in preset_data:
                    prompt = preset_data['prompt']
                    params_text += f"\nüé® –ê–ù–ê–õ–ò–ó PROMPT:\n"
                    params_text += "-" * 20 + "\n"
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞
                    valid_colors = self._load_color_table()
                    params_text += f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞: {', '.join(valid_colors[:15])}...\n"
                    
                    try:
                        # –£–±–∏—Ä–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–≤–µ—Ç–æ–≤
                        clean_prompt = prompt.replace('ohwx_rubber_tile', '').replace('<s0><s1>', '').strip()
                        # –£–±–∏—Ä–∞–µ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Ü–≤–µ—Ç–∞–º–∏
                        clean_prompt = clean_prompt.replace('rubber tile', '').replace('high quality', '').replace('realistic texture', '').replace('grid pattern', '').replace('random pattern', '').replace('radial pattern', '').replace('granular pattern', '').strip()
                        color_parts = [p.strip() for p in clean_prompt.split(',') if p.strip() and '%' in p]
                        colors = []
                        total_percentage = 0
                        
                        for part in color_parts:
                            if '%' in part:
                                percent_str, color_name = part.split('%', 1)
                                percent = float(percent_str.strip())
                                color_name = color_name.strip()
                                colors.append({"name": color_name, "percentage": percent})
                                total_percentage += percent
                        
                        params_text += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤: {len(colors)}\n"
                        params_text += f"‚Ä¢ –°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤: {total_percentage}%\n"
                        params_text += f"‚Ä¢ –¶–≤–µ—Ç–∞: {', '.join([f'{c['percentage']}% {c['name']}' for c in colors])}\n"
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤
                        invalid_colors = [c['name'] for c in colors if c['name'].upper() not in valid_colors]
                        if invalid_colors:
                            params_text += f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞: {', '.join(invalid_colors)}\n"
                        else:
                            params_text += f"‚úÖ –í—Å–µ —Ü–≤–µ—Ç–∞ –≤–∞–ª–∏–¥–Ω—ã\n"
                        
                        if total_percentage != 100:
                            params_text += f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —Å—É–º–º–∞ –Ω–µ —Ä–∞–≤–Ω–∞ 100%\n"
                        if len(colors) > 4:
                            params_text += f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –±–æ–ª—å—à–µ 4 —Ü–≤–µ—Ç–æ–≤\n"
                            
                    except Exception as e:
                        params_text += f"‚Ä¢ –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ prompt: {e}\n"
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
                self.preset_params_text.config(state=tk.NORMAL)
                self.preset_params_text.delete(1.0, tk.END)
                self.preset_params_text.insert(1.0, params_text)
                self.preset_params_text.config(state=tk.DISABLED)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä
                if is_valid:
                    self.append_log(f"üìã –í—ã–±—Ä–∞–Ω –ø—Ä–µ—Å–µ—Ç: {clean_name} ‚úÖ\n")
                else:
                    self.append_log(f"‚ö†Ô∏è –í—ã–±—Ä–∞–Ω –ø—Ä–µ—Å–µ—Ç —Å –æ—à–∏–±–∫–∞–º–∏: {clean_name}\n")
                    for error in validation_errors:
                        self.append_log(f"  {error}\n")
            else:
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –µ—Å–ª–∏ –ø—Ä–µ—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
                self.preset_params_text.config(state=tk.NORMAL)
                self.preset_params_text.delete(1.0, tk.END)
                self.preset_params_text.insert(1.0, f"‚ùå –ü—Ä–µ—Å–µ—Ç '{clean_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.preset_params_text.config(state=tk.DISABLED)
                
        except Exception as e:
            self.append_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞: {e}\n")
    
    def _display_multiple_presets(self, selection) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –≤—ã–±–æ—Ä–µ –ø—Ä–µ—Å–µ—Ç–æ–≤"""
        try:
            selected_presets = []
            for idx in selection:
                preset_name = self.listbox.get(idx)
                clean_name = preset_name.replace("‚úÖ ", "").replace("‚ùå ", "").replace("‚ö†Ô∏è ", "")
                selected_presets.append(clean_name)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –≤—ã–±–æ—Ä–µ
            params_text = f"üìã –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ô –í–´–ë–û–† –ü–†–ï–°–ï–¢–û–í\n"
            params_text += "=" * 50 + "\n\n"
            params_text += f"üéØ –í—ã–±—Ä–∞–Ω–æ –ø—Ä–µ—Å–µ—Ç–æ–≤: {len(selection)}\n\n"
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤
            params_text += "üìã –í–´–ë–†–ê–ù–ù–´–ï –ü–†–ï–°–ï–¢–´:\n"
            params_text += "-" * 30 + "\n"
            
            for i, preset_name in enumerate(selected_presets, 1):
                params_text += f"{i}. {preset_name}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –ø—Ä–µ—Å–µ—Ç–µ
                if preset_name in self.presets:
                    preset_data = self.presets[preset_name]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                    is_valid, _ = self.validate_preset(preset_name, preset_data, self.current_version)
                    status = "‚úÖ" if is_valid else "‚ùå"
                    
                    # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    if 'prompt' in preset_data:
                        prompt = preset_data['prompt']
                        if len(prompt) > 40:
                            prompt = prompt[:37] + "..."
                        params_text += f"   Prompt: {prompt}\n"
                    
                    # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
                    if hasattr(self, 'current_version') and self.current_version and compare_versions(self.current_version, "v4.5.01") >= 0:
                        if 'num_inference_steps' in preset_data and 'guidance_scale' in preset_data:
                            params_text += f"   Steps: {preset_data['num_inference_steps']}, Guidance: {preset_data['guidance_scale']}\n"
                        if 'colormap' in preset_data:
                            params_text += f"   Colormap: {preset_data['colormap']}\n"
                        if 'granule_size' in preset_data:
                            params_text += f"   Granule Size: {preset_data['granule_size']}\n"
                    else:
                        if 'steps' in preset_data and 'guidance' in preset_data:
                            params_text += f"   Steps: {preset_data['steps']}, Guidance: {preset_data['guidance']}\n"
                        if 'lora_scale' in preset_data:
                            params_text += f"   LoRA Scale: {preset_data['lora_scale']}\n"
                    
                    params_text += f"   –°—Ç–∞—Ç—É—Å: {status}\n\n"
                else:
                    params_text += f"   ‚ùå –ü—Ä–µ—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n"
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
            params_text += "üöÄ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–´–ü–û–õ–ù–ï–ù–ò–ò:\n"
            params_text += "-" * 30 + "\n"
            params_text += "‚Ä¢ –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ 'Start' –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –í–°–ï –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã\n"
            params_text += "‚Ä¢ –ü—Ä–µ—Å–µ—Ç—ã –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ\n"
            params_text += "‚Ä¢ –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–µ—Å–µ—Ç\n"
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
            self.preset_params_text.config(state=tk.NORMAL)
            self.preset_params_text.delete(1.0, tk.END)
            self.preset_params_text.insert(1.0, params_text)
            self.preset_params_text.config(state=tk.DISABLED)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
            self.append_log(f"üìã –í—ã–±—Ä–∞–Ω–æ –ø—Ä–µ—Å–µ—Ç–æ–≤: {len(selection)}\n")
            for preset_name in selected_presets:
                self.append_log(f"  ‚Ä¢ {preset_name}\n")
                
        except Exception as e:
            self.append_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤: {e}\n")
    
    def update_version_info(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –∏ —Ö–µ—à–µ"""
        print("üîÑ update_version_info –≤—ã–∑–≤–∞–Ω")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
        if not hasattr(self, 'text'):
            print("‚ùå Text widget –Ω–µ —Å–æ–∑–¥–∞–Ω, –≤—ã—Ö–æ–¥ –∏–∑ update_version_info")
            return
        print("‚úÖ Text widget –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏")
            
        try:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ cog.yaml –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç YAML
            new_version = self._extract_version_from_cog_yaml()
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º v4.5.01 –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
            if not new_version or new_version == "unknown":
                new_version = "v4.5.01"
                self.append_log(f"‚ö†Ô∏è –í–µ—Ä—Å–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º {new_version}\n")
            
            if new_version and new_version != self.current_version:
                self.current_version = new_version
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ö–µ—à–∞
                self.current_hash = self.get_optimal_hash(new_version)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
                self.root.title(f"Replicate Test Runner - {self.current_version} ({self.current_hash})")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–±–ª—ã –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏
                if hasattr(self, 'version_label'):
                    self.version_label.config(text=self.current_version)
                if hasattr(self, 'hash_label'):
                    self.hash_label.config(text=self.current_hash)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                self.append_log(f"üîÑ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {self.current_version}\n")
                self.append_log(f"‚úÖ –ù–æ–≤—ã–π —Ö–µ—à (–≥–∏–±—Ä–∏–¥–Ω—ã–π): {self.current_hash}\n")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º worker —Å –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π
                if hasattr(self, 'worker') and self.worker is not None:
                    self.worker._version_id = new_version
                    # –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Ä—Å–∏—é –∏ —Ö–µ—à –≤ worker
                    self.worker.current_version = new_version
                    self.worker.current_hash = self.current_hash
                
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ—Å–µ—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
                self._reload_presets_for_version()
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤ GUI –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
                self._create_gui_log_file()
            else:
                # –î–∞–∂–µ –µ—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ö–µ—à–∞
                optimal_hash = self.get_optimal_hash(self.current_version)
                if optimal_hash != self.current_hash:
                    self.current_hash = optimal_hash
                    self.append_log(f"üîÑ –•–µ—à –æ–±–Ω–æ–≤–ª–µ–Ω: {self.current_hash}\n")
                    self.root.title(f"Replicate Test Runner - {self.current_version} ({self.current_hash})")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–π–±–ª —Ö–µ—à–∞
                    if hasattr(self, 'hash_label'):
                        self.hash_label.config(text=self.current_hash)
                else:
                    self.append_log(f"‚úÖ –í–µ—Ä—Å–∏—è –∏ —Ö–µ—à –∞–∫—Ç—É–∞–ª—å–Ω—ã: {self.current_version} ({self.current_hash})\n")
        except Exception as e:
            self.append_log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: {e}\n")
    
    def _extract_version_from_cog_yaml(self) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ cog.yaml –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è YAML –º–æ–¥—É–ª—è"""
        try:
            with open("cog.yaml", "r", encoding="utf-8") as f:
                content = f.read()
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –≤–µ—Ä—Å–∏–µ–π –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            for line in content.split('\n'):
                if line.strip().startswith('# Version:'):
                    version_part = line.split('Version:')[1].strip()
                    return version_part.split()[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ "Version:"
                
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É –æ–±—Ä–∞–∑–∞
                if 'image:' in line and 'plitka-pro-project:' in line:
                    version_part = line.split('plitka-pro-project:')[1].strip()
                    return version_part
                    
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            return self._determine_version_fallback()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cog.yaml: {e}")
            return self._determine_version_fallback()
    
    def _determine_version_fallback(self) -> str:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        try:
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: Docker –æ–±—Ä–∞–∑—ã
            docker_version = self._get_version_from_docker()
            if docker_version:
                return docker_version
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: Git —Ç–µ–≥–∏
            git_version = self._get_version_from_git()
            if git_version:
                return git_version
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –§–∞–π–ª –≤–µ—Ä—Å–∏–∏
            file_version = self._get_version_from_file()
            if file_version:
                return file_version
            
            # Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–µ—Ä—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
            return self._generate_version_from_time()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: {e}")
            return self._generate_version_from_time()
    
    def _get_version_from_docker(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ Docker –æ–±—Ä–∞–∑–æ–≤"""
        try:
            import subprocess
            result = subprocess.run(
                ["docker", "images", "--format", "{{.Repository}}:{{.Tag}}", "r8.im/nauslava/plitka-pro-project"],
                capture_output=True, text=True, timeout=10
            )
            if result.returncode == 0 and result.stdout.strip():
                lines = result.stdout.strip().split('\n')
                for line in lines:
                    if ':' in line and not line.endswith(':latest'):
                        version = line.split(':')[-1]
                        if version.startswith('v'):
                            return version
        except Exception:
            pass
        return ""
    
    def _get_version_from_git(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ Git —Ç–µ–≥–æ–≤"""
        try:
            import subprocess
            result = subprocess.run(
                ["git", "describe", "--tags", "--abbrev=0"],
                capture_output=True, text=True, timeout=10
            )
            if result.returncode == 0 and result.stdout.strip():
                return result.stdout.strip()
        except Exception:
            pass
        return ""
    
    def _get_version_from_file(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ —Ñ–∞–π–ª–∞ –≤–µ—Ä—Å–∏–∏"""
        try:
            version_files = ["VERSION", "version.txt", ".version"]
            for filename in version_files:
                if os.path.exists(filename):
                    with open(filename, "r") as f:
                        version = f.read().strip()
                        if version.startswith('v'):
                            return version
        except Exception:
            pass
        return ""
    
    def _generate_version_from_time(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–µ—Ä—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ (fallback)"""
        import time
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        return f"v{timestamp}"
    
    def get_optimal_hash(self, version: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è –≤–µ—Ä—Å–∏–∏ (–≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥)"""
        print(f"üîç –ü–æ–∏—Å–∫ —Ö–µ—à–∞ –¥–ª—è –≤–µ—Ä—Å–∏–∏: {version}")
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: Docker –æ–±—Ä–∞–∑
        docker_hash = self.get_docker_image_hash(version)
        if docker_hash:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω Docker —Ö–µ—à: {docker_hash}")
            return docker_hash
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: Replicate API
        replicate_hash = self.get_replicate_version_hash(version)
        if replicate_hash:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω Replicate —Ö–µ—à: {replicate_hash}")
            return replicate_hash
        
        # Fallback: –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏–∑ –≤–µ—Ä—Å–∏–∏
        computed_hash = self.compute_version_hash(version)
        print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ö–µ—à: {computed_hash}")
        return computed_hash
    
    def get_docker_image_hash(self, version: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ö–µ—à Docker –æ–±—Ä–∞–∑–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        try:
            import subprocess
            # –ò—â–µ–º –æ–±—Ä–∞–∑ –ø–æ —Ç–µ–≥—É –≤–µ—Ä—Å–∏–∏
            result = subprocess.run(
                ["docker", "images", "--format", "{{.ID}}", f"r8.im/nauslava/plitka-pro-project:{version}"],
                capture_output=True, text=True, timeout=10
            )
            if result.returncode == 0 and result.stdout.strip():
                full_hash = result.stdout.strip()
                return full_hash[:8]  # –ü–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø–∞–ø–∫–∏
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Docker —Ö–µ—à–∞: {e}")
        return ""
    
    def get_replicate_version_hash(self, version: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ö–µ—à –≤–µ—Ä—Å–∏–∏ Replicate —á–µ—Ä–µ–∑ API"""
        try:
            if not REPLICATE_AVAILABLE:
                return ""
            
            import replicate
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
            model_info = replicate.models.get("nauslava/plitka-pro-project")
            if model_info and hasattr(model_info, 'versions'):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ versions –∏—Ç–µ—Ä–∏—Ä—É–µ–º–æ
                try:
                    versions_list = list(model_info.versions) if hasattr(model_info.versions, '__iter__') else []
                    for ver in versions_list:
                        if hasattr(ver, 'id') and ver.id == version:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º digest –≤–µ—Ä—Å–∏–∏
                            if hasattr(ver, 'digest') and ver.digest:
                                return ver.digest[:8]
                            # –ò–ª–∏ –≤—ã—á–∏—Å–ª—è–µ–º –∏–∑ ID –≤–µ—Ä—Å–∏–∏
                            import hashlib
                            hash_obj = hashlib.md5(ver.id.encode())
                            return hash_obj.hexdigest()[:8]
                except (TypeError, AttributeError) as e:
                    print(f"–û—à–∏–±–∫–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ –≤–µ—Ä—Å–∏—è–º: {e}")
                    # Fallback: –≤—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à –∏–∑ –≤–µ—Ä—Å–∏–∏
                    import hashlib
                    hash_obj = hashlib.md5(version.encode())
                    return hash_obj.hexdigest()[:8]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Replicate —Ö–µ—à–∞: {e}")
        return ""
    
    def compute_version_hash(self, version: str) -> str:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ö–µ—à –≤–µ—Ä—Å–∏–∏ –∫–∞–∫ fallback"""
        try:
            import hashlib
            hash_obj = hashlib.md5(version.encode())
            return hash_obj.hexdigest()[:8]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö–µ—à–∞ –≤–µ—Ä—Å–∏–∏: {e}")
            return "unknown"
    
    def run_demo(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
        if not hasattr(self, 'text'):
            return
            
        self.append_log("\nüé≠ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞...\n")
        self.append_log(f"üöÄ –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {self.current_version}\n")
        self.append_log(f"üîê –•–µ—à –ø–∞–ø–∫–∏: {self.current_hash}\n")
        self.append_log(f"üìÅ –û–∂–∏–¥–∞–µ–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: replicate_runs/{self.current_hash}/run_YYYYMMDD_HHMMSS/\n")
        self.append_log("‚ö†Ô∏è Replicate –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —ç—Ç–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º\n")
        self.append_log("üí° –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install replicate\n")
        self.append_log("=" * 60 + "\n")

    def drain_queue(self) -> None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
        if not hasattr(self, 'text'):
            return
            
        try:
            while True:
                msg = self.ui_queue.get_nowait()
                if isinstance(msg, str) and msg.startswith("__IMG__::"):
                    try:
                        _, kind, path = msg.split("::", 2)
                        self._update_image_preview(kind, path)
                    except Exception:
                        pass
                else:
                    self.append_log(msg)
        except queue.Empty:
            pass
        self.root.after(300, self.drain_queue)

    def update_timer(self) -> None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
        if not hasattr(self, 'text'):
            return
            
        # Reflect worker status
        try:
            if not hasattr(self, 'worker') or self.worker is None:
                self.status_var.set("idle")
                self.elapsed_var.set("00:00")
                return
                
            self.status_var.set(getattr(self.worker, "_status", "idle"))
            start_time = getattr(self.worker, "_start_time", None)
            if start_time:
                elapsed = int(time.time() - start_time)
                mm = elapsed // 60
                ss = elapsed % 60
                self.elapsed_var.set(f"{mm:02d}:{ss:02d}")
            else:
                self.elapsed_var.set("00:00")
            if not self.worker.is_running() and self.controls_locked:
                self.start_btn.configure(state=tk.NORMAL)
                self.listbox.configure(state=tk.NORMAL)
                self.controls_locked = False
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
            try:
                self.append_log(f"[GUI] Timer error: {e}\n")
            except:
                pass
        finally:
            self.root.after(1000, self.update_timer)

    def selected_presets(self) -> List[Dict[str, Any]]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
        if not hasattr(self, 'listbox'):
            return []
            
        sel = self.listbox.curselection()
        items: List[Dict[str, Any]] = []
        for idx in sel:
            name = self.listbox.get(idx)
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã —Å—Ç–∞—Ç—É—Å–∞
            clean_name = name.replace("‚úÖ ", "").replace("‚ùå ", "").replace("‚ö†Ô∏è ", "")
            inputs = self.presets.get(clean_name, {})
            items.append({"name": clean_name, "inputs": inputs})
        if not items and self.presets:
            # default to first preset if nothing selected
            name = list(self.presets.keys())[0]
            items.append({"name": name, "inputs": self.presets[name]})
        return items

    def on_start(self) -> None:
        self.append_log("üîÑ on_start() –≤—ã–∑–≤–∞–Ω\n")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ worker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if not hasattr(self, 'worker') or self.worker is None:
            messagebox.showerror("Error", "Worker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.")
            return
            
        if self.worker.is_running():
            messagebox.showinfo("Info", "Test is already running")
            return
            
        # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –≤–≤–µ–¥—ë–Ω –≤ –ø–æ–ª–µ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        try:
            if not getattr(self.worker, 'api_token', None):
                entered = self.token_var.get().strip()
                if entered:
                    os.environ["REPLICATE_API_TOKEN"] = entered
                    self.worker.api_token = entered
                else:
                    messagebox.showwarning("Token missing", "REPLICATE_API_TOKEN is not set. Enter token and press Save")
                    return
        except Exception as e:
            messagebox.showerror("Error", f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return
        items = self.selected_presets()
        if not items:
            messagebox.showwarning("No presets", "No presets available to run")
            return
            
        if not REPLICATE_AVAILABLE:
            messagebox.showwarning("Replicate –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", 
                                 "–ú–æ–¥—É–ª—å 'replicate' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install replicate\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'Demo Mode' –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
        if not hasattr(self, 'text'):
            return
            
        # –ù–ï —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∑–¥–µ—Å—å - –æ–Ω–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –≤ worker'–µ
        # self._create_log_file()
        
        self.append_log("\n[GUI] Starting tests...\n")
        self.append_log(f"üöÄ –ó–∞–ø—É—Å–∫ —Å –≤–µ—Ä—Å–∏–µ–π: {self.current_version}\n")
        self.append_log(f"üîê –•–µ—à –ø–∞–ø–∫–∏: {self.current_hash}\n")
        self.append_log(f"üìÅ –û–∂–∏–¥–∞–µ–º–∞—è –ø–∞–ø–∫–∞: replicate_runs/{self.current_hash}/\n")
        current_dir = os.getcwd()
        self.append_log(f"üîç –¢–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥: {current_dir}\n")
        full_path = os.path.join(current_dir, 'replicate_runs', self.current_hash)
        self.append_log(f"üìÅ –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {full_path}\n")
        self.append_log(f"üìÅ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å: {os.path.abspath(full_path)}\n")
        self.append_log("-" * 50 + "\n")
        
        # Disable controls while running
        self.start_btn.configure(state=tk.DISABLED)
        self.listbox.configure(state=tk.DISABLED)
        self.controls_locked = True
        self.worker.start(items)

    def on_stop(self) -> None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
        if not hasattr(self, 'text'):
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ worker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if not hasattr(self, 'worker') or self.worker is None:
            self.append_log("[GUI] Worker –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.\n")
            return
            
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self._create_stop_log_file()
            
        try:
            if not self.worker.is_running():
                self.append_log("[GUI] No active run to stop.\n")
                return
            self.worker.stop()
            self.append_log("[GUI] Stop requested.\n")
        except Exception as e:
            self.append_log(f"[GUI] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}\n")
        finally:
            # Re-enable controls after stop request (worker cancels prediction)
            self.start_btn.configure(state=tk.NORMAL)
            self.listbox.configure(state=tk.NORMAL)
            self.controls_locked = False

    def on_close(self) -> None:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
        if not hasattr(self, 'text'):
            return
            
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤ –µ–¥–∏–Ω–æ–π –ø–∞–ø–∫–µ
        self._create_close_log_file()
        
        try:
            if hasattr(self, 'worker') and self.worker is not None and self.worker.is_running():
                try:
                    self.worker.stop()
                except Exception:
                    pass
                # give a brief moment to send cancel
                self.root.after(500, self.root.destroy)
            else:
                self.root.destroy()
        except Exception:
            self.root.destroy()


def main() -> int:
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ GUI...")
        root = tk.Tk()
        print("‚úÖ Tkinter –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ App...")
        app = App(root)
        print("‚úÖ App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤...")
        if hasattr(app, 'text'):
            print("‚úÖ Text widget —Å–æ–∑–¥–∞–Ω")
        else:
            print("‚ùå Text widget –ù–ï —Å–æ–∑–¥–∞–Ω")
            
        if hasattr(app, 'worker'):
            print("‚úÖ Worker —Å–æ–∑–¥–∞–Ω")
        else:
            print("‚ùå Worker –ù–ï —Å–æ–∑–¥–∞–Ω")
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
        print("üîÑ –ó–∞–ø—É—Å–∫ mainloop...")
        try:
            root.mainloop()
            print("‚úÖ GUI –∑–∞–≤–µ—Ä—à–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ mainloop: {e}")
            import traceback
            traceback.print_exc()
        return 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ GUI: {e}")
        import traceback
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    raise SystemExit(main())


