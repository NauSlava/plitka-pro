#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏–π —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Plitka Pro
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π —Ü–≤–µ—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞–±–ª–∏—Ü–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π
"""

import json
import re
import os
from typing import List, Dict, Set

# –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Ä—É—Å—Å–∫–∏—Ö –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Ü–≤–µ—Ç–æ–≤
COLOR_TABLE = {
    "–ë–µ–∂–µ–≤—ã–π": "BEIGE",
    "–ë–µ–ª–æ-–∑–µ–ª–µ–Ω—ã–π": "WHTGRN", 
    "–ë–µ–ª—ã–π": "WHITE",
    "–ë–∏—Ä—é–∑–æ–≤—ã–π": "TURQSE",
    "–ì–æ–ª—É–±–æ–π": "SKYBLUE",
    "–ñ–µ–ª—Ç—ã–π": "YELLOW",
    "–ñ–µ–º—á—É–∂–Ω—ã–π": "PEARL",
    "–ó–µ–ª–µ–Ω–∞—è —Ç—Ä–∞–≤–∞": "GRSGRN",
    "–ó–µ–ª–µ–Ω–æ–µ —è–±–ª–æ–∫–æ": "GRNAPL",
    "–ò–∑—É–º—Ä—É–¥–Ω—ã–π": "EMERALD",
    "–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π": "BROWN",
    "–ö—Ä–∞—Å–Ω—ã–π": "RED",
    "–õ–æ—Å–æ—Å—å": "SALMON",
    "–û—Ä–∞–Ω–∂–µ–≤—ã–π": "ORANGE",
    "–ü–µ—Å–æ—á–Ω—ã–π": "SAND",
    "–†–æ–∑–æ–≤—ã–π": "PINK",
    "–°–∞–ª–∞—Ç–æ–≤—ã–π": "LIMEGRN",
    "–°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π": "LTGREEN",
    "–°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π": "LTGRAY",
    "–°–µ—Ä—ã–π": "GRAY",
    "–°–∏–Ω–∏–π": "BLUE",
    "–°–∏—Ä–µ–Ω–µ–≤—ã–π": "LILAC",
    "–¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π": "DKGREEN",
    "–¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π": "DKGRAY",
    "–¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π": "DKBLUE",
    "–¢–µ—Ä—Ä–∞–∫–æ—Ç": "TERCOT",
    "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π": "VIOLET",
    "–•–∞–∫–∏": "KHAKI",
    "–ß—ë—Ä–Ω—ã–π": "BLACK"
}

# –î–æ–ø—É—Å—Ç–∏–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ (–≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
VALID_COLORS = {color.lower() for color in COLOR_TABLE.values()}

def extract_colors_from_prompt(prompt: str) -> List[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–≤–µ—Ç–æ–≤: "XX% color_name" –∏–ª–∏ "color_name"
    color_pattern = r'(\d+)%\s+([a-zA-Z]+)'
    matches = re.findall(color_pattern, prompt)
    
    colors = []
    for percent, color_name in matches:
        colors.append(color_name.lower().strip())
    
    return colors

def validate_presets_file(file_path: str) -> Dict[str, List[str]]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –ø—Ä–µ—Å–µ—Ç–æ–≤"""
    print(f"üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞: {file_path}")
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            presets = json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return {}
    
    errors = []
    warnings = []
    valid_presets = 0
    
    for preset_name, preset_data in presets.items():
        if "prompt" not in preset_data:
            continue
            
        prompt = preset_data["prompt"]
        colors = extract_colors_from_prompt(prompt)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞
        for color in colors:
            if color not in VALID_COLORS:
                errors.append(f"‚ùå {preset_name}: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ü–≤–µ—Ç '{color}' –≤ –ø—Ä–æ–º–ø—Ç–µ '{prompt}'")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
        if len(colors) != len(set(colors)):
            warnings.append(f"‚ö†Ô∏è {preset_name}: –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –≤ –ø—Ä–æ–º–ø—Ç–µ '{prompt}'")
        
        valid_presets += 1
    
    print(f"‚úÖ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–µ—Å–µ—Ç–æ–≤: {valid_presets}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
    print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(warnings)}")
    
    return {
        "errors": errors,
        "warnings": warnings,
        "valid_presets": valid_presets
    }

def validate_colors_table():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Ü–≤–µ—Ç–æ–≤"""
    print("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ü–≤–µ—Ç–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    english_colors = list(COLOR_TABLE.values())
    if len(english_colors) != len(set(english_colors)):
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    for russian, english in COLOR_TABLE.items():
        if not english or not russian:
            print(f"‚ùå –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {russian} -> {english}")
            return False
    
    print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —Ü–≤–µ—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {len(COLOR_TABLE)} —Ü–≤–µ—Ç–æ–≤")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé® –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Plitka Pro")
    print("=" * 60)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ü–≤–µ—Ç–æ–≤
    if not validate_colors_table():
        return
    
    print("\nüìã –î–æ–ø—É—Å—Ç–∏–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤:")
    for i, color in enumerate(sorted(VALID_COLORS), 1):
        print(f"  {i:2d}. {color}")
    
    print(f"\nüìÅ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ—Å–µ—Ç–æ–≤...")
    
    # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ—Å–µ—Ç–æ–≤
    scripts_dir = "scripts"
    preset_files = []
    
    if os.path.exists(scripts_dir):
        for file in os.listdir(scripts_dir):
            if file.startswith("test_inputs_") and file.endswith(".json"):
                preset_files.append(os.path.join(scripts_dir, file))
    
    if not preset_files:
        print("‚ùå –§–∞–π–ª—ã –ø—Ä–µ—Å–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ—Å–µ—Ç–æ–≤: {len(preset_files)}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    total_errors = 0
    total_warnings = 0
    total_presets = 0
    
    for preset_file in preset_files:
        print(f"\n{'='*60}")
        result = validate_presets_file(preset_file)
        
        if result:
            total_errors += len(result["errors"])
            total_warnings += len(result["warnings"])
            total_presets += result["valid_presets"]
            
            # –í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫
            for error in result["errors"]:
                print(error)
            
            # –í—ã–≤–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            for warning in result["warnings"]:
                print(warning)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print(f"‚úÖ –í—Å–µ–≥–æ –ø—Ä–µ—Å–µ—Ç–æ–≤: {total_presets}")
    print(f"‚ùå –í—Å–µ–≥–æ –æ—à–∏–±–æ–∫: {total_errors}")
    print(f"‚ö†Ô∏è –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {total_warnings}")
    
    if total_errors == 0:
        print("üéâ –í—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
    else:
        print("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö —Ü–≤–µ—Ç–æ–≤")

if __name__ == "__main__":
    main()
