#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏ –∏ —Ö–µ—à–µ
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ Replicate
"""

import os
import json
import subprocess
import sys
from datetime import datetime
from pathlib import Path

def get_git_version():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ git —Ç–µ–≥–æ–≤"""
    try:
        result = subprocess.run(
            ["git", "describe", "--tags", "--always"],
            capture_output=True, text=True, timeout=10
        )
        if result.returncode == 0:
            return result.stdout.strip()
        return "unknown"
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è git –≤–µ—Ä—Å–∏–∏: {e}")
        return "unknown"

def get_git_commit_hash():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ö–µ—à –∫–æ–º–º–∏—Ç–∞ –∏–∑ git"""
    try:
        result = subprocess.run(
            ["git", "rev-parse", "HEAD"],
            capture_output=True, text=True, timeout=10
        )
        if result.returncode == 0:
            return result.stdout.strip()
        return "unknown"
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è git —Ö–µ—à–∞: {e}")
        return "unknown"

def get_docker_image_hash(version):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ö–µ—à Docker –æ–±—Ä–∞–∑–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    try:
        result = subprocess.run(
            ["docker", "images", "--format", "{{.ID}}", f"r8.im/nauslava/plitka-pro-project:{version}"],
            capture_output=True, text=True, timeout=10
        )
        if result.returncode == 0 and result.stdout.strip():
            return result.stdout.strip()[:8]
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Docker —Ö–µ—à–∞: {e}")
        return None

def update_version_info():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –∏ —Ö–µ—à–µ"""
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ git
    git_version = get_git_version()
    git_hash = get_git_commit_hash()
    
    print(f"üîç Git –≤–µ—Ä—Å–∏—è: {git_version}")
    print(f"üîç Git —Ö–µ—à: {git_hash}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if git_version.startswith('v'):
        current_version = git_version
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–≥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ cog.yaml
        try:
            with open('cog.yaml', 'r') as f:
                content = f.read()
                for line in content.split('\n'):
                    if line.strip().startswith('# Version:'):
                        current_version = line.split(':')[1].strip()
                        break
                else:
                    current_version = "v4.5.06"  # fallback
        except:
            current_version = "v4.5.06"  # fallback
    
    print(f"üìã –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {current_version}")
    
    # –ü–æ–ª—É—á–∞–µ–º Docker —Ö–µ—à
    docker_hash = get_docker_image_hash(current_version)
    if docker_hash:
        print(f"üê≥ Docker —Ö–µ—à: {docker_hash}")
    else:
        print("‚ö†Ô∏è Docker —Ö–µ—à –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–µ—Ä—Å–∏–∏
    version_info = {
        "version": current_version,
        "git_version": git_version,
        "git_hash": git_hash,
        "docker_hash": docker_hash,
        "updated_at": datetime.now().isoformat(),
        "build_info": {
            "python_version": sys.version,
            "platform": sys.platform
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ version_info.json
    with open('version_info.json', 'w', encoding='utf-8') as f:
        json.dump(version_info, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ version_info.json")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
    env_file = Path('.env')
    if env_file.exists():
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env
        with open(env_file, 'r') as f:
            env_content = f.read()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        env_lines = env_content.split('\n')
        updated_lines = []
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        env_vars = {
            'CURRENT_VERSION': current_version,
            'CURRENT_GIT_HASH': git_hash,
            'CURRENT_DOCKER_HASH': docker_hash or 'unknown'
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏
        for line in env_lines:
            if '=' in line and not line.strip().startswith('#'):
                key = line.split('=')[0].strip()
                if key in env_vars:
                    updated_lines.append(f"{key}={env_vars[key]}")
                    del env_vars[key]
                else:
                    updated_lines.append(line)
            else:
                updated_lines.append(line)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        for key, value in env_vars.items():
            updated_lines.append(f"{key}={value}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env
        with open(env_file, 'w') as f:
            f.write('\n'.join(updated_lines))
        
        print(f"‚úÖ .env —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤–µ—Ä—Å–∏–∏")
    
    return version_info

if __name__ == "__main__":
    print("=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏ ===")
    version_info = update_version_info()
    print("\nüìã –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
    for key, value in version_info.items():
        print(f"  {key}: {value}")

