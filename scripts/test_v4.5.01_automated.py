#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è v4.5.01 - Critical Architecture Fixes
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: AttributeError, –≤–∞–ª–∏–¥–∞—Ü–∏—è colormap, ControlNet –º–µ—Ç–æ–¥—ã
"""

import os
import json
import time
import sys
from typing import Dict, List, Any, Optional
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def load_env_token() -> Optional[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç API —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env —Ñ–∞–π–ª–∞"""
    token = os.getenv("REPLICATE_API_TOKEN")
    if token:
        return token
    
    env_path = project_root / ".env"
    if env_path.exists():
        try:
            with open(env_path, "r", encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    if not line or line.startswith("#"):
                        continue
                    if line.startswith("REPLICATE_API_TOKEN="):
                        _, value = line.split("=", 1)
                        value = value.strip().strip('"').strip("'")
                        if value:
                            return value
        except Exception:
            pass
    return None

def load_presets() -> Dict[str, Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ—Å–µ—Ç—ã –¥–ª—è v4.5.01"""
    presets_path = project_root / "scripts" / "test_inputs_v4.5.01_critical_fixes.json"
    
    if not presets_path.exists():
        print(f"‚ùå –§–∞–π–ª –ø—Ä–µ—Å–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {presets_path}")
        return {}
    
    try:
        with open(presets_path, "r", encoding="utf-8") as f:
            data = json.load(f)
            if not isinstance(data, dict):
                raise ValueError("Presets JSON must be an object mapping preset names to input dicts")
            return data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤: {e}")
        return {}

def validate_preset(preset_name: str, preset_data: dict) -> tuple[bool, List[str]]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–µ—Å–µ—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º v4.5.01"""
    errors = []
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ prompt
        if 'prompt' not in preset_data:
            errors.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'prompt'")
            return False, errors
        
        prompt = preset_data['prompt']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è v4.5.01
        required_fields = ['seed', 'num_inference_steps', 'guidance_scale']
        for field in required_fields:
            if field not in preset_data:
                errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        optional_fields = ['colormap', 'granule_size', 'negative_prompt']
        for field in optional_fields:
            if field not in preset_data:
                errors.append(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}'")
        
        return len(errors) == 0, errors
        
    except Exception as e:
        errors.append(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False, errors

def run_single_test(client, preset_name: str, preset_data: dict) -> dict:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüß™ –¢–ï–°–¢: {preset_name}")
    print("=" * 60)
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–µ—Å–µ—Ç
    is_valid, errors = validate_preset(preset_name, preset_data)
    if not is_valid:
        print("‚ùå –ü—Ä–µ—Å–µ—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é:")
        for error in errors:
            print(f"  {error}")
        return {
            "name": preset_name,
            "status": "validation_failed",
            "errors": errors,
            "duration": 0
        }
    
    print("‚úÖ –ü—Ä–µ—Å–µ—Ç –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞
    print(f"üìù Prompt: {preset_data.get('prompt', 'N/A')[:80]}...")
    print(f"üé≤ Seed: {preset_data.get('seed', 'N/A')}")
    print(f"üîÑ Steps: {preset_data.get('num_inference_steps', 'N/A')}")
    print(f"üìè Guidance: {preset_data.get('guidance_scale', 'N/A')}")
    print(f"üé® Colormap: {preset_data.get('colormap', 'N/A')}")
    print(f"üîç Granule Size: {preset_data.get('granule_size', 'N/A')}")
    
    start_time = time.time()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        pred = client.predictions.create(
            model="nauslava/plitka-pro-project:v4.5.01",
            input=preset_data
        )
        
        print(f"üìã Prediction ID: {pred.id}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        pred.wait()
        
        duration = time.time() - start_time
        
        if pred.status == "succeeded":
            print(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.1f}—Å")
            return {
                "name": preset_name,
                "status": "success",
                "duration": duration,
                "prediction_id": pred.id,
                "output": pred.output
            }
        else:
            print(f"‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {pred.status}")
            return {
                "name": preset_name,
                "status": "failed",
                "duration": duration,
                "prediction_id": pred.id,
                "error": pred.error
            }
            
    except Exception as e:
        duration = time.time() - start_time
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}")
        return {
            "name": preset_name,
            "status": "error",
            "duration": duration,
            "error": str(e)
        }

def run_critical_tests() -> List[dict]:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –¥–ª—è v4.5.01"""
    print("üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï v4.5.01 - Critical Architecture Fixes")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω
    api_token = load_env_token()
    if not api_token:
        print("‚ùå REPLICATE_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤ —Ñ–∞–π–ª–µ .env")
        return []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å replicate
    try:
        import replicate
        client = replicate.Client(api_token=api_token)
        print("‚úÖ Replicate –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å 'replicate' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install replicate")
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Replicate: {e}")
        return []
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ—Å–µ—Ç—ã
    presets = load_presets()
    if not presets:
        print("‚ùå –ü—Ä–µ—Å–µ—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        return []
    
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ—Å–µ—Ç–æ–≤: {len(presets)}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
    critical_tests = [
        "üî¥ MONO COLOR - BASIC FUNCTIONALITY",
        "üî¥üîµ DUO COLOR - ATTRIBUTEERROR FIX", 
        "üî¥üîµüîµ TRIO COLOR - CONTROLNET METHODS",
        "üåà MULTI COLOR - COMPLEX CONTROLNET",
        "üé® RGBA COLORMAP VALIDATION"
    ]
    
    available_tests = [name for name in critical_tests if name in presets]
    print(f"üéØ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(available_tests)}")
    
    if not available_tests:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø—Ä–µ—Å–µ—Ç–∞—Ö!")
        return []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    results = []
    total_start_time = time.time()
    
    for test_name in available_tests:
        preset_data = presets[test_name]
        result = run_single_test(client, test_name, preset_data)
        results.append(result)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        time.sleep(2)
    
    total_duration = time.time() - total_start_time
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    successful = [r for r in results if r["status"] == "success"]
    failed = [r for r in results if r["status"] != "success"]
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(successful)}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(failed)}")
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.1f}—Å")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for result in results:
        status_icon = "‚úÖ" if result["status"] == "success" else "‚ùå"
        print(f"{status_icon} {result['name']}: {result['status']} ({result['duration']:.1f}—Å)")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    save_results(results, total_duration)
    
    return results

def save_results(results: List[dict], total_duration: float) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_dir = project_root / "replicate_runs" / "v4.5.01_automated_tests"
        results_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        results_file = results_dir / f"test_results_{timestamp}.json"
        
        test_summary = {
            "version": "v4.5.01",
            "test_type": "Critical Architecture Fixes",
            "timestamp": timestamp,
            "total_duration": total_duration,
            "total_tests": len(results),
            "successful_tests": len([r for r in results if r["status"] == "success"]),
            "failed_tests": len([r for r in results if r["status"] != "success"]),
            "results": results
        }
        
        with open(results_file, "w", encoding="utf-8") as f:
            json.dump(test_summary, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        results = run_critical_tests()
        
        if not results:
            print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
            return 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        successful = [r for r in results if r["status"] == "success"]
        if len(successful) == len(results):
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è v4.5.01 —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return 0
        else:
            print(f"\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(successful)}/{len(results)}")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())
