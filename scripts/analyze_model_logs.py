#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –º–æ–¥–µ–ª–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import json
import os
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any

def find_model_log_sessions(base_dir: str = "replicate_runs") -> List[Path]:
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    base_path = Path(base_dir)
    sessions = []
    
    if not base_path.exists():
        return sessions
    
    # –ò—â–µ–º –ø–∞–ø–∫–∏ —Å model_logs_
    for hash_dir in base_path.iterdir():
        if hash_dir.is_dir():
            for session_dir in hash_dir.iterdir():
                if session_dir.is_dir() and session_dir.name.startswith("model_logs_"):
                    sessions.append(session_dir)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    sessions.sort(key=lambda x: x.stat().st_mtime, reverse=True)
    return sessions

def analyze_session(session_dir: Path) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–Ω—É —Å–µ—Å—Å–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    session_info = {}
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
    session_info_file = session_dir / "session_info.json"
    if session_info_file.exists():
        try:
            with open(session_info_file, 'r', encoding='utf-8') as f:
                session_info = json.load(f)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ session_info.json: {e}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤
    analysis_file = session_dir / "logs_analysis.json"
    if analysis_file.exists():
        try:
            with open(analysis_file, 'r', encoding='utf-8') as f:
                analysis = json.load(f)
                session_info.update(analysis)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ logs_analysis.json: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª –ª–æ–≥–æ–≤
    log_file = session_dir / "model_realtime.log"
    if log_file.exists():
        session_info["log_file_size"] = log_file.stat().st_size
        session_info["log_file_exists"] = True
    else:
        session_info["log_file_exists"] = False
    
    return session_info

def create_summary_report(sessions: List[Dict[str, Any]]) -> str:
    """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º —Å–µ—Å—Å–∏—è–º"""
    if not sessions:
        return "# Model Logs Summary Report\n\n**–ù–µ—Ç —Å–µ—Å—Å–∏–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏.**\n"
    
    total_sessions = len(sessions)
    total_logs = sum(s.get('log_statistics', {}).get('total_logs', 0) for s in sessions)
    total_size = sum(s.get('log_file_size', 0) for s in sessions)
    
    report = f"""# Model Logs Summary Report

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π:** {total_sessions}
- **–í—Å–µ–≥–æ –ª–æ–≥–æ–≤:** {total_logs}
- **–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ª–æ–≥–æ–≤:** {total_size:,} –±–∞–π—Ç

## üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏—è–º

"""
    
    for i, session in enumerate(sessions, 1):
        session_id = session.get('session_id', 'unknown')
        version = session.get('version', 'unknown')
        hash_id = session.get('hash_id', 'unknown')
        prediction_id = session.get('prediction_id', 'unknown')
        start_time = session.get('start_time', 'unknown')
        end_time = session.get('end_time', 'unknown')
        total_logs = session.get('log_statistics', {}).get('total_logs', 0)
        log_size = session.get('log_file_size', 0)
        
        report += f"""### {i}. {session_id}

- **–í–µ—Ä—Å–∏—è:** {version}
- **–•–µ—à:** {hash_id}
- **Prediction ID:** {prediction_id}
- **–ù–∞—á–∞–ª–æ:** {start_time}
- **–û–∫–æ–Ω—á–∞–Ω–∏–µ:** {end_time}
- **–õ–æ–≥–æ–≤:** {total_logs}
- **–†–∞–∑–º–µ—Ä:** {log_size:,} –±–∞–π—Ç

"""
    
    return report

def create_issues_report(sessions: List[Dict[str, Any]]) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º"""
    issues = []
    
    for session in sessions:
        session_id = session.get('session_id', 'unknown')
        logs = session.get('all_logs', [])
        
        # –ò—â–µ–º –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö
        for log in logs:
            content = log.get('content', '')
            if any(keyword in content.lower() for keyword in ['error', '–æ—à–∏–±–∫–∞', 'failed', 'exception']):
                issues.append({
                    'session': session_id,
                    'timestamp': log.get('timestamp', 'unknown'),
                    'content': content,
                    'type': 'error'
                })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
        if not session.get('log_file_exists', False):
            issues.append({
                'session': session_id,
                'timestamp': session.get('start_time', 'unknown'),
                'content': '–§–∞–π–ª –ª–æ–≥–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                'type': 'missing_file'
            })
    
    if not issues:
        return "# Model Logs Issues Report\n\n**–ü—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.**\n"
    
    report = f"""# Model Logs Issues Report

**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üö® –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã

"""
    
    for issue in issues:
        report += f"""### {issue['type'].upper()}

- **–°–µ—Å—Å–∏—è:** {issue['session']}
- **–í—Ä–µ–º—è:** {issue['timestamp']}
- **–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:** {issue['content']}

"""
    
    return report

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü–æ–∏—Å–∫ —Å–µ—Å—Å–∏–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏...")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
    session_dirs = find_model_log_sessions()
    
    if not session_dirs:
        print("‚ùå –°–µ—Å—Å–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(session_dirs)} —Å–µ—Å—Å–∏–π")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Å–µ—Å—Å–∏—é
    sessions = []
    for session_dir in session_dirs:
        print(f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é: {session_dir.name}")
        session_info = analyze_session(session_dir)
        sessions.append(session_info)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç—ã
    reports_dir = Path("docs/reports")
    reports_dir.mkdir(exist_ok=True)
    
    # –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    summary_report = create_summary_report(sessions)
    summary_file = reports_dir / "model_logs_summary_report.md"
    with open(summary_file, 'w', encoding='utf-8') as f:
        f.write(summary_report)
    print(f"üìÑ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {summary_file}")
    
    # –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º
    issues_report = create_issues_report(sessions)
    issues_file = reports_dir / "model_logs_issues_report.md"
    with open(issues_file, 'w', encoding='utf-8') as f:
        f.write(issues_report)
    print(f"üìÑ –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º —Å–æ–∑–¥–∞–Ω: {issues_file}")
    
    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Å—Å–∏–∏
    if sessions:
        latest = sessions[0]
        print(f"\nüìä –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è: {latest.get('session_id', 'unknown')}")
        print(f"  - –í–µ—Ä—Å–∏—è: {latest.get('version', 'unknown')}")
        print(f"  - –õ–æ–≥–æ–≤: {latest.get('log_statistics', {}).get('total_logs', 0)}")
        print(f"  - –†–∞–∑–º–µ—Ä: {latest.get('log_file_size', 0):,} –±–∞–π—Ç")
        print(f"  - –§–∞–π–ª –ª–æ–≥–æ–≤: {'‚úÖ' if latest.get('log_file_exists', False) else '‚ùå'}")

if __name__ == "__main__":
    main()
