#!/usr/bin/env python3
"""
Real-time GUI Log Saver –¥–ª—è Plitka Pro
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –ª–æ–≥–∏ GUI –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
"""

import os
import json
import threading
import time
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any

class RealtimeLogSaver:
    def __init__(self, project_root="/home/papaandrey/plitka-pro-project"):
        self.project_root = Path(project_root)
        self.logs_dir = self.project_root / "docs" / "reports" / "gui_logs" / "realtime"
        self.logs_dir.mkdir(parents=True, exist_ok=True)
        
        # –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.session_log_file = None
        self.analysis_file = None
        self.current_session_id = None
        
        # –ë—É—Ñ–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
        self.log_buffer = []
        self.buffer_lock = threading.Lock()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            "total_logs": 0,
            "warnings": 0,
            "errors": 0,
            "version_issues": 0,
            "preset_errors": 0,
            "session_start": None
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        self.start_autosave()
    
    def start_new_session(self, version="unknown", hash_id="unknown"):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.current_session_id = f"session_{version}_{hash_id}_{timestamp}"
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Å–µ—Å—Å–∏–∏
        self.session_log_file = self.logs_dir / f"{self.current_session_id}.log"
        self.analysis_file = self.logs_dir / f"{self.current_session_id}_analysis.json"
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats = {
            "total_logs": 0,
            "warnings": 0,
            "errors": 0,
            "version_issues": 0,
            "preset_errors": 0,
            "session_start": datetime.now().isoformat(),
            "version": version,
            "hash_id": hash_id
        }
        
        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
        with self.buffer_lock:
            self.log_buffer = []
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ—Å—Å–∏–∏
        self._write_session_header(version, hash_id)
        
        print(f"üîÑ –ù–∞—á–∞—Ç–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {self.current_session_id}")
    
    def add_log(self, log_content: str, log_type: str = "info"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ª–æ–≥ –≤ –±—É—Ñ–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        timestamp = datetime.now().isoformat()
        
        log_entry = {
            "timestamp": timestamp,
            "content": log_content.strip(),
            "type": log_type,
            "session_id": self.current_session_id
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º
        self._analyze_log_entry(log_entry)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä
        with self.buffer_lock:
            self.log_buffer.append(log_entry)
            self.stats["total_logs"] += 1
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        self._write_log_entry(log_entry)
    
    def _analyze_log_entry(self, log_entry: Dict[str, Any]):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–±–ª–µ–º"""
        content = log_entry["content"].lower()
        
        # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        if "‚ñ≤" in log_entry["content"] or "warning" in content:
            self.stats["warnings"] += 1
            log_entry["type"] = "warning"
        
        # –ü–æ–¥—Å—á–µ—Ç –æ—à–∏–±–æ–∫
        if "‚ùå" in log_entry["content"] or "error" in content or ("–æ—à–∏–±–∫–∞" in content and "‚ùå" not in content):
            self.stats["errors"] += 1
            log_entry["type"] = "error"
        
        # –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–µ—Ä—Å–∏—è–º–∏
        if "–≤–µ—Ä—Å–∏—è" in content and ("–Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in content or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞" in content):
            self.stats["version_issues"] += 1
            log_entry["type"] = "version_issue"
        
        # –û—à–∏–±–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤
        if "–ø—Ä–µ—Å–µ—Ç" in content and "—Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏" in content:
            self.stats["preset_errors"] += 1
            log_entry["type"] = "preset_error"
    
    def _write_session_header(self, version: str, hash_id: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ—Å—Å–∏–∏"""
        if not self.session_log_file:
            return
        
        header = f"""=== GUI Real-time Logs Session ===
Session ID: {self.current_session_id}
Version: {version}
Hash: {hash_id}
Start Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
========================================

"""
        
        with open(self.session_log_file, 'w', encoding='utf-8') as f:
            f.write(header)
    
    def _write_log_entry(self, log_entry: Dict[str, Any]):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ª–æ–≥ –≤ —Ñ–∞–π–ª"""
        if not self.session_log_file:
            return
        
        timestamp = log_entry["timestamp"]
        content = log_entry["content"]
        log_type = log_entry["type"]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–æ–≥
        formatted_log = f"[{timestamp}] [{log_type.upper()}] {content}\n"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        with open(self.session_log_file, 'a', encoding='utf-8') as f:
            f.write(formatted_log)
    
    def start_autosave(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥"""
        def autosave_worker():
            while True:
                time.sleep(30)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                self._save_analysis()
        
        autosave_thread = threading.Thread(target=autosave_worker, daemon=True)
        autosave_thread.start()
    
    def _save_analysis(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –≤ JSON —Ñ–∞–π–ª"""
        if not self.analysis_file:
            return
        
        analysis = {
            "session_info": {
                "session_id": self.current_session_id,
                "start_time": self.stats["session_start"],
                "version": self.stats.get("version", "unknown"),
                "hash_id": self.stats.get("hash_id", "unknown")
            },
            "statistics": self.stats,
            "recent_logs": self.log_buffer[-50:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –ª–æ–≥–æ–≤
            "analysis_timestamp": datetime.now().isoformat()
        }
        
        with open(self.analysis_file, 'w', encoding='utf-8') as f:
            json.dump(analysis, f, ensure_ascii=False, indent=2)
    
    def save_final_analysis(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–∏"""
        if not self.analysis_file:
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        self.stats["session_end"] = datetime.now().isoformat()
        self.stats["total_duration"] = self._calculate_duration()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        analysis = {
            "session_info": {
                "session_id": self.current_session_id,
                "start_time": self.stats["session_start"],
                "end_time": self.stats["session_end"],
                "duration": self.stats["total_duration"],
                "version": self.stats.get("version", "unknown"),
                "hash_id": self.stats.get("hash_id", "unknown")
            },
            "statistics": self.stats,
            "all_logs": self.log_buffer,  # –í—Å–µ –ª–æ–≥–∏
            "analysis_timestamp": datetime.now().isoformat()
        }
        
        with open(self.analysis_file, 'w', encoding='utf-8') as f:
            json.dump(analysis, f, ensure_ascii=False, indent=2)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –≤ Markdown
        self._create_markdown_report()
        
        print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {self.analysis_file}")
    
    def _calculate_duration(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏"""
        if not self.stats["session_start"]:
            return "unknown"
        
        start_time = datetime.fromisoformat(self.stats["session_start"])
        end_time = datetime.now()
        duration = end_time - start_time
        
        return str(duration)
    
    def _create_markdown_report(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown"""
        report_file = self.logs_dir / f"{self.current_session_id}_report.md"
        
        report = f"""# GUI Real-time Logs Report

**–°–µ—Å—Å–∏—è:** {self.current_session_id}  
**–í–µ—Ä—Å–∏—è:** {self.stats.get('version', 'unknown')}  
**–•–µ—à:** {self.stats.get('hash_id', 'unknown')}  
**–ù–∞—á–∞–ª–æ:** {self.stats.get('session_start', 'unknown')}  
**–û–∫–æ–Ω—á–∞–Ω–∏–µ:** {self.stats.get('session_end', 'unknown')}  
**–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {self.stats.get('total_duration', 'unknown')}  

## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

- **–í—Å–µ–≥–æ –ª–æ–≥–æ–≤:** {self.stats['total_logs']}
- **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:** {self.stats['warnings']}
- **–û—à–∏–±–∫–∏:** {self.stats['errors']}
- **–ü—Ä–æ–±–ª–µ–º—ã —Å –≤–µ—Ä—Å–∏—è–º–∏:** {self.stats['version_issues']}
- **–û—à–∏–±–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤:** {self.stats['preset_errors']}

## üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ª–æ–≥–æ–≤
        recent_logs = self.log_buffer[-20:] if self.log_buffer else []
        for log in recent_logs:
            report += f"- **[{log['type'].upper()}]** {log['content']}\n"
        
        report += f"\n---\n*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_file}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ GUI
realtime_log_saver = RealtimeLogSaver()

def get_log_saver():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞"""
    return realtime_log_saver

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    saver = RealtimeLogSaver()
    saver.start_new_session("v4.5.09", "a6fe1706")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ª–æ–≥–∏
    saver.add_log("–¢–µ—Å—Ç 1: –ó–∞–ø—É—Å–∫ GUI", "info")
    saver.add_log("‚ñ≤ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –í–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "warning")
    saver.add_log("—Ö –û—à–∏–±–∫–∞: –ü—Ä–µ—Å–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏", "error")
    
    time.sleep(2)
    saver.save_final_analysis()
