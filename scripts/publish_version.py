#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
"""

import os
import sys
import subprocess
from pathlib import Path

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    print(f"\nüîÑ {description}...")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    
    if result.returncode == 0:
        print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
        if result.stdout:
            print(f"–í—ã–≤–æ–¥: {result.stdout}")
    else:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞")
        print(f"–û—à–∏–±–∫–∞: {result.stderr}")
        return False
    
    return True

def update_version_info():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏"""
    print("\nüìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
        result = subprocess.run(
            [sys.executable, "scripts/update_version_info.py"],
            capture_output=True, text=True
        )
        
        if result.returncode == 0:
            print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            print(f"–í—ã–≤–æ–¥: {result.stdout}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return False
    
    return True

def build_and_push():
    """–°–æ–±–∏—Ä–∞–µ—Ç –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –æ–±—Ä–∞–∑"""
    print("\nüöÄ –°–±–æ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–∑–∞...")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏
    if not update_version_info():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏")
        return False
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑
    if not run_command("cog build", "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞"):
        return False
    
    # –ü—É–±–ª–∏–∫—É–µ–º –æ–±—Ä–∞–∑
    if not run_command("cog push", "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ Replicate"):
        return False
    
    print("\n‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=== –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–µ—Ä—Å–∏–∏ ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    if not Path("cog.yaml").exists():
        print("‚ùå –û—à–∏–±–∫–∞: cog.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞.")
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ cog —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    try:
        result = subprocess.run(["cog", "--version"], capture_output=True, text=True)
        if result.returncode != 0:
            print("‚ùå –û—à–∏–±–∫–∞: cog –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            return 1
    except FileNotFoundError:
        print("‚ùå –û—à–∏–±–∫–∞: cog –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH")
        return 1
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±–æ—Ä–∫—É –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
    if build_and_push():
        print("\nüéâ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –Ω–∞ Replicate")
        print("2. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑ GUI —Ç–µ—Å—Ç–µ—Ä")
        return 0
    else:
        print("\n‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        return 1

if __name__ == "__main__":
    sys.exit(main())

