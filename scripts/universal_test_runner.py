#!/usr/bin/env python3
"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è –ª—é–±–æ–π –≤–µ—Ä—Å–∏–∏ Plitka Pro
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç—ã
"""

import os
import json
import time
import sys
import argparse
from typing import Dict, List, Any, Optional
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def extract_version_from_cog_yaml() -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏–∑ cog.yaml"""
    try:
        cog_yaml_path = project_root / "cog.yaml"
        if not cog_yaml_path.exists():
            return "unknown"
            
        with open(cog_yaml_path, "r", encoding="utf-8") as f:
            content = f.read()
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –≤–µ—Ä—Å–∏–µ–π –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        for line in content.split('\n'):
            if line.strip().startswith('# Version:'):
                version_part = line.split('Version:')[1].strip()
                return version_part.split()[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ "Version:"
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É –æ–±—Ä–∞–∑–∞
            if 'image:' in line and 'plitka-pro-project:' in line:
                version_part = line.split('plitka-pro-project:')[1].strip()
                return version_part
                
        return "unknown"
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è cog.yaml: {e}")
        return "unknown"

def get_presets_file_for_version(version: str) -> Path:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    scripts_dir = project_root / "scripts"
    
    # –ú–∞–ø–ø–∏–Ω–≥ –≤–µ—Ä—Å–∏–π –∫ —Ñ–∞–π–ª–∞–º –ø—Ä–µ—Å–µ—Ç–æ–≤
    version_mapping = {
        "v4.5.01": "test_inputs_v4.5.01_critical_fixes.json",
        "v4.4.61": "test_inputs_v4.4.61_extended.json",
        "v4.4.60": "test_inputs_v4.4.60_extended.json",
        "v4.4.59": "test_inputs_v4.4.59.json",
        "v4.4.58": "test_inputs_v4.4.58.json",
        "v4.4.56": "test_inputs_v4.4.56.json",
        "v4.4.45": "test_inputs_v4.4.45.json",
        "v4.4.39": "test_inputs_v4.4.39.json",
    }
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤–µ—Ä—Å–∏–∏
    filename = version_mapping.get(version, "test_inputs_v4.4.39.json")
    presets_path = scripts_dir / filename
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if presets_path.exists():
        return presets_path
    else:
        # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É —Ñ–∞–π–ª—É
        fallback_path = scripts_dir / "test_inputs_v4.4.39.json"
        if fallback_path.exists():
            print(f"‚ö†Ô∏è –§–∞–π–ª –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è –≤–µ—Ä—Å–∏–∏ {version} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π")
            return fallback_path
        else:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –ø—Ä–µ—Å–µ—Ç–æ–≤
            empty_presets = {
                "default": {
                    "prompt": "ohwx_rubber_tile <s0><s1> 100% red rubber tile, high quality",
                    "negative_prompt": "blurry, low quality",
                    "num_inference_steps": 25,
                    "guidance_scale": 7.5,
                    "seed": 42,
                    "colormap": "random",
                    "granule_size": "medium",
                    "description": "–ë–∞–∑–æ–≤—ã–π –ø—Ä–µ—Å–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                }
            }
            with open(fallback_path, 'w', encoding='utf-8') as f:
                json.dump(empty_presets, f, indent=2, ensure_ascii=False)
            print(f"üìÅ –°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª –ø—Ä–µ—Å–µ—Ç–æ–≤: {fallback_path}")
            return fallback_path

def load_env_token() -> Optional[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç API —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env —Ñ–∞–π–ª–∞"""
    token = os.getenv("REPLICATE_API_TOKEN")
    if token:
        return token
    
    env_path = project_root / ".env"
    if env_path.exists():
        try:
            with open(env_path, "r", encoding="utf-8") as f:
                for line in f:
                    line = line.strip()
                    if not line or line.startswith("#"):
                        continue
                    if line.startswith("REPLICATE_API_TOKEN="):
                        _, value = line.split("=", 1)
                        value = value.strip().strip('"').strip("'")
                        if value:
                            return value
        except Exception:
            pass
    return None

def load_presets(version: str) -> Dict[str, Dict[str, Any]]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ—Å–µ—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    presets_path = get_presets_file_for_version(version)
    
    try:
        with open(presets_path, "r", encoding="utf-8") as f:
            data = json.load(f)
            if not isinstance(data, dict):
                raise ValueError("Presets JSON must be an object mapping preset names to input dicts")
            return data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤: {e}")
        return {}

def compare_versions(version1: str, version2: str) -> int:
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤–µ—Ä—Å–∏–∏. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç -1 –µ—Å–ª–∏ version1 < version2, 0 –µ—Å–ª–∏ —Ä–∞–≤–Ω—ã, 1 –µ—Å–ª–∏ version1 > version2"""
    def version_tuple(v):
        # –£–±–∏—Ä–∞–µ–º 'v' –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        v = v.replace('v', '')
        parts = v.split('.')
        return tuple(int(part) for part in parts)
    
    try:
        v1_tuple = version_tuple(version1)
        v2_tuple = version_tuple(version2)
        if v1_tuple < v2_tuple:
            return -1
        elif v1_tuple > v2_tuple:
            return 1
        else:
            return 0
    except (ValueError, IndexError):
        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
        return -1 if version1 < version2 else (1 if version1 > version2 else 0)

def load_color_table() -> List[str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ü–≤–µ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ colors_table.txt"""
    try:
        color_file = project_root / "colors_table.txt"
        if not color_file.exists():
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ü–≤–µ—Ç–∞–º
            return ["RED", "BLUE", "GREEN", "YELLOW", "ORANGE", "PINK", "WHITE", "BLACK", "GRAY", "BROWN"]
        
        with open(color_file, "r", encoding="utf-8") as f:
            colors = [line.strip().upper() for line in f if line.strip()]
        return colors
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü—ã —Ü–≤–µ—Ç–æ–≤: {e}")
        # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ü–≤–µ—Ç–∞–º
        return ["RED", "BLUE", "GREEN", "YELLOW", "ORANGE", "PINK", "WHITE", "BLACK", "GRAY", "BROWN"]

def validate_preset_for_version(preset_name: str, preset_data: dict, version: str) -> tuple[bool, List[str]]:
    """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø—Ä–µ—Å–µ—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    errors = []
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ü–≤–µ—Ç–æ–≤
    valid_colors = load_color_table()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ prompt
        if 'prompt' not in preset_data:
            errors.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'prompt'")
            return False, errors
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏
        if compare_versions(version, "v4.5.01") >= 0:
            required_fields = ['seed', 'num_inference_steps', 'guidance_scale']
            optional_fields = ['colormap', 'granule_size', 'negative_prompt']
        else:
            # –î–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
            required_fields = ['seed', 'steps', 'guidance', 'lora_scale']
            optional_fields = ['use_controlnet', 'description']
    
        for field in required_fields:
            if field not in preset_data:
                errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
        for field in optional_fields:
            if field not in preset_data:
                errors.append(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}'")
        
        return len(errors) == 0, errors
        
    except Exception as e:
        errors.append(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False, errors

def run_single_test(client, preset_name: str, preset_data: dict, version: str) -> dict:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —Ç–µ—Å—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüß™ –¢–ï–°–¢: {preset_name}")
    print("=" * 60)
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–µ—Å–µ—Ç
    is_valid, errors = validate_preset_for_version(preset_name, preset_data, version)
    if not is_valid:
        print("‚ùå –ü—Ä–µ—Å–µ—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é:")
        for error in errors:
            print(f"  {error}")
        return {
            "name": preset_name,
            "status": "validation_failed",
            "errors": errors,
            "duration": 0
        }
    
    print("‚úÖ –ü—Ä–µ—Å–µ—Ç –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ—Å—Ç–∞
    print(f"üìù Prompt: {preset_data.get('prompt', 'N/A')[:80]}...")
    print(f"üé≤ Seed: {preset_data.get('seed', 'N/A')}")
    
    if version >= "v4.5.01":
        print(f"üîÑ Steps: {preset_data.get('num_inference_steps', 'N/A')}")
        print(f"üìè Guidance: {preset_data.get('guidance_scale', 'N/A')}")
        print(f"üé® Colormap: {preset_data.get('colormap', 'N/A')}")
        print(f"üîç Granule Size: {preset_data.get('granule_size', 'N/A')}")
    else:
        print(f"üîÑ Steps: {preset_data.get('steps', 'N/A')}")
        print(f"üìè Guidance: {preset_data.get('guidance', 'N/A')}")
        print(f"üîß LoRA Scale: {preset_data.get('lora_scale', 'N/A')}")
    
    start_time = time.time()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")
        pred = client.predictions.create(
            model=f"nauslava/plitka-pro-project:{version}",
            input=preset_data
        )
        
        print(f"üìã Prediction ID: {pred.id}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        pred.wait()
        
        duration = time.time() - start_time
        
        if pred.status == "succeeded":
            print(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.1f}—Å")
            return {
                "name": preset_name,
                "status": "success",
                "duration": duration,
                "prediction_id": pred.id,
                "output": pred.output
            }
        else:
            print(f"‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {pred.status}")
            return {
                "name": preset_name,
                "status": "failed",
                "duration": duration,
                "prediction_id": pred.id,
                "error": pred.error
            }
            
    except Exception as e:
        duration = time.time() - start_time
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞: {e}")
        return {
            "name": preset_name,
            "status": "error",
            "duration": duration,
            "error": str(e)
        }

def run_tests(version: str, test_names: List[str] = None, max_tests: int = None) -> List[dict]:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
    print(f"üéØ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï {version}")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API —Ç–æ–∫–µ–Ω
    api_token = load_env_token()
    if not api_token:
        print("‚ùå REPLICATE_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤ —Ñ–∞–π–ª–µ .env")
        return []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å replicate
    try:
        import replicate
        client = replicate.Client(api_token=api_token)
        print("‚úÖ Replicate –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å 'replicate' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install replicate")
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Replicate: {e}")
        return []
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ—Å–µ—Ç—ã
    presets = load_presets(version)
    if not presets:
        print("‚ùå –ü—Ä–µ—Å–µ—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        return []
    
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ—Å–µ—Ç–æ–≤: {len(presets)}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Å—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    if test_names:
        available_tests = [name for name in test_names if name in presets]
        print(f"üéØ –£–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(available_tests)}")
    else:
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤
        available_tests = list(presets.keys())
        if max_tests:
            available_tests = available_tests[:max_tests]
        print(f"üéØ –¢–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞: {len(available_tests)}")
    
    if not available_tests:
        print("‚ùå –¢–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    results = []
    total_start_time = time.time()
    
    for test_name in available_tests:
        preset_data = presets[test_name]
        result = run_single_test(client, test_name, preset_data, version)
        results.append(result)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        time.sleep(2)
    
    total_duration = time.time() - total_start_time
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    successful = [r for r in results if r["status"] == "success"]
    failed = [r for r in results if r["status"] != "success"]
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(successful)}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(failed)}")
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration:.1f}—Å")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for result in results:
        status_icon = "‚úÖ" if result["status"] == "success" else "‚ùå"
        print(f"{status_icon} {result['name']}: {result['status']} ({result['duration']:.1f}—Å)")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    save_results(results, total_duration, version)
    
    return results

def save_results(results: List[dict], total_duration: float, version: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_dir = project_root / "replicate_runs" / f"{version}_universal_tests"
        results_dir.mkdir(parents=True, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        results_file = results_dir / f"test_results_{timestamp}.json"
        
        test_summary = {
            "version": version,
            "test_type": "Universal Testing",
            "timestamp": timestamp,
            "total_duration": total_duration,
            "total_tests": len(results),
            "successful_tests": len([r for r in results if r["status"] == "success"]),
            "failed_tests": len([r for r in results if r["status"] != "success"]),
            "results": results
        }
        
        with open(results_file, "w", encoding="utf-8") as f:
            json.dump(test_summary, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä –¥–ª—è Plitka Pro")
    parser.add_argument("--version", "-v", help="–í–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
    parser.add_argument("--tests", "-t", nargs="+", help="–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
    parser.add_argument("--max", "-m", type=int, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤")
    parser.add_argument("--list", "-l", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã")
    
    args = parser.parse_args()
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é
        if args.version:
            version = args.version
        else:
            version = extract_version_from_cog_yaml()
        
        if version == "unknown":
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é!")
            print("üí° –£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä—Å–∏—é –≤—Ä—É—á–Ω—É—é: --version v4.5.01")
            return 1
        
        print(f"üéØ –í–µ—Ä—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {version}")
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
        if args.list:
            presets = load_presets(version)
            if presets:
                print(f"\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è {version}:")
                for i, name in enumerate(presets.keys(), 1):
                    print(f"  {i}. {name}")
            else:
                print("‚ùå –ü—Ä–µ—Å–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return 0
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        results = run_tests(version, args.tests, args.max)
        
        if not results:
            print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
            return 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        successful = [r for r in results if r["status"] == "success"]
        if len(successful) == len(results):
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
            return 0
        else:
            print(f"\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò!")
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(successful)}/{len(results)}")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())
