#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π v4.4.58
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É ColorManager –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
"""

import json
import os
import sys
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç ColorManager –∏–∑ predict.py
sys.path.append('.')
try:
    from predict import ColorManager
    COLOR_MANAGER_AVAILABLE = True
except ImportError:
    COLOR_MANAGER_AVAILABLE = False
    print("‚ö†Ô∏è ColorManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è")

def load_test_presets():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è v4.4.58"""
    preset_file = "scripts/test_inputs_v4.4.58.json"
    
    if not os.path.exists(preset_file):
        print(f"‚ùå –§–∞–π–ª –ø—Ä–µ—Å–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {preset_file}")
        return None
    
    try:
        with open(preset_file, 'r', encoding='utf-8') as f:
            presets = json.load(f)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–µ—Å–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(presets)}")
        return presets
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤: {e}")
        return None

def analyze_preset(preset_name, preset_data):
    """–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞"""
    prompt = preset_data.get("prompt", "")
    expected_steps = preset_data.get("steps", 20)
    expected_guidance = preset_data.get("guidance", 7.0)
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ColorManager –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    if COLOR_MANAGER_AVAILABLE:
        try:
            color_manager = ColorManager()
            colors = color_manager.extract_colors_from_prompt(prompt)
            color_count = len(colors)
            print(f"   üîç ColorManager: {colors} ({color_count} —Ü–≤–µ—Ç–æ–≤)")
        except Exception as e:
            print(f"   ‚ö†Ô∏è ColorManager –æ—à–∏–±–∫–∞: {e}")
            colors = []
            color_count = 0
    else:
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        colors = []
        words = prompt.lower().split()
        
        for word in words:
            clean_word = word.strip('%,.!?()[]{}')
            if clean_word in ['grsgrn', 'ltgreen', 'whtgrn', 'dkblue', 'dkgreen', 'dkgray', 'emerald', 'grnapl', 'turqse', 'skyblue', 'pearl', 'salmon', 'beige', 'violet', 'lilac', 'red', 'blue', 'yellow', 'brown', 'gray', 'white', 'black', 'orange', 'pink', 'khaki', 'limegrn', 'ltgray', 'tercot']:
                colors.append(clean_word)
        
        color_count = len(colors)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–≤–µ—Ç–æ–≤
    if color_count == 1:
        expected_adaptive_steps = 20
        expected_adaptive_guidance = 7.0
    elif color_count == 2:
        expected_adaptive_steps = 25
        expected_adaptive_guidance = 7.5
    elif color_count == 3:
        expected_adaptive_steps = 30
        expected_adaptive_guidance = 8.0
    else:  # 4+ —Ü–≤–µ—Ç–∞
        expected_adaptive_steps = 35
        expected_adaptive_guidance = 8.5
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    steps_match = expected_steps == expected_adaptive_steps
    guidance_match = abs(expected_guidance - expected_adaptive_guidance) < 0.1
    
    return {
        "prompt": prompt,
        "colors": colors,
        "color_count": color_count,
        "expected_steps": expected_steps,
        "expected_guidance": expected_guidance,
        "expected_adaptive_steps": expected_adaptive_steps,
        "expected_adaptive_guidance": expected_adaptive_guidance,
        "steps_match": steps_match,
        "guidance_match": guidance_match,
        "all_match": steps_match and guidance_match
    }

def run_critical_tests():
    """–ó–∞–ø—É—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô v4.4.58")
    print("=" * 80)
    
    if COLOR_MANAGER_AVAILABLE:
        print("‚úÖ ColorManager –¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è")
    else:
        print("‚ö†Ô∏è ColorManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ—Å–µ—Ç–æ–≤
    presets = load_test_presets()
    if not presets:
        return False
    
    # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ—Å–µ—Ç–∞
    test_results = []
    critical_tests = []
    
    for preset_name, preset_data in presets.items():
        if "critical_fix_test" in preset_name:
            critical_tests.append((preset_name, preset_data))
        else:
            test_results.append((preset_name, preset_data))
    
    # –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print("\nüî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
    print("-" * 50)
    
    critical_success = 0
    for preset_name, preset_data in critical_tests:
        result = analyze_preset(preset_name, preset_data)
        
        status = "‚úÖ" if result["all_match"] else "‚ùå"
        print(f"{status} {preset_name}")
        print(f"   –ü—Ä–æ–º–ø—Ç: {result['prompt']}")
        print(f"   –¶–≤–µ—Ç–∞: {result['colors']} ({result['color_count']})")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: steps={result['expected_steps']}, guidance={result['expected_guidance']}")
        print(f"   –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: steps={result['expected_adaptive_steps']}, guidance={result['expected_adaptive_guidance']}")
        print(f"   –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {'–î–ê' if result['all_match'] else '–ù–ï–¢'}")
        print()
        
        if result["all_match"]:
            critical_success += 1
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ—Å–µ—Ç—ã
    print("\nüîµ –û–ë–©–ò–ï –¢–ï–°–¢–´:")
    print("-" * 50)
    
    general_success = 0
    for preset_name, preset_data in test_results:
        result = analyze_preset(preset_name, preset_data)
        
        status = "‚úÖ" if result["all_match"] else "‚ùå"
        print(f"{status} {preset_name}")
        print(f"   –ü—Ä–æ–º–ø—Ç: {result['prompt']}")
        print(f"   –¶–≤–µ—Ç–∞: {result['colors']} ({result['color_count']})")
        print(f"   –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: {'–î–ê' if result['all_match'] else '–ù–ï–¢'}")
        
        if result["all_match"]:
            general_success += 1
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã: {critical_success}/{len(critical_tests)} ‚úÖ")
    print(f"üîµ –û–±—â–∏–µ —Ç–µ—Å—Ç—ã: {general_success}/{len(test_results)} ‚úÖ")
    print(f"üìà –û–±—â–∏–π —É—Å–ø–µ—Ö: {critical_success + general_success}/{len(presets)} ‚úÖ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
    if critical_success == len(critical_tests):
        print("\nüéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("‚úÖ –†–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞")
        print("‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return True
    else:
        print(f"\n‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ù–ï –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        print(f"‚ùå –£—Å–ø–µ—à–Ω–æ: {critical_success}/{len(critical_tests)}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Plitka Pro v4.4.58")
    print("=" * 80)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
    required_files = [
        "predict.py",
        "scripts/test_inputs_v4.4.58.json",
        "scripts/validate_colors.py"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã:")
        for file_path in missing_files:
            print(f"   - {file_path}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    success = run_critical_tests()
    
    if success:
        print("\nüöÄ –ì–û–¢–û–í –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ –ù–ê REPLICATE!")
        print("üìã URL: https://replicate.com/nauslava/plitka-pro-project:v4.4.58")
        print("üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–µ—Å—Ç—ã:")
        print("   1. 100% grsgrn (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1 —Ü–≤–µ—Ç, 20 steps)")
        print("   2. 60% grsgrn, 40% yellow (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 —Ü–≤–µ—Ç–∞, 25 steps)")
        print("   3. 60% ltgreen, 40% blue (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 —Ü–≤–µ—Ç–∞, 25 steps)")
    else:
        print("\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê!")
    
    return success

if __name__ == "__main__":
    main()
