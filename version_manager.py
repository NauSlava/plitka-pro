#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏—è–º–∏ –∏ —Ö–µ—à–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ Plitka Pro
"""

import json
import os
import subprocess
from typing import Dict, Optional, Tuple
from pathlib import Path
from datetime import datetime


class VersionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤–µ—Ä—Å–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Plitka Pro"""
    
    def __init__(self, config_path: str = "version_config.json"):
        self.config_path = Path(config_path)
        self.config = self._load_config()
    
    def _load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–µ—Ä—Å–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if self.config_path.exists():
                with open(self.config_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                return self._get_default_config()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return self._get_default_config()
    
    def _get_default_config(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "version_mappings": {},
            "default_version": "v4.5.07",
            "fallback_strategy": {
                "primary": "replicate_api",
                "secondary": "version_config",
                "tertiary": "docker_images"
            },
            "replicate_model": "nauslava/plitka-pro-project"
        }
    
    def get_version_info(self, version: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏"""
        return self.config.get("version_mappings", {}).get(version)
    
    def get_replicate_hash(self, version: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ö–µ—à Replicate –¥–ª—è –≤–µ—Ä—Å–∏–∏"""
        version_info = self.get_version_info(version)
        return version_info.get("replicate_hash") if version_info else None
    
    def get_full_hash(self, version: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ö–µ—à –¥–ª—è –≤–µ—Ä—Å–∏–∏"""
        version_info = self.get_version_info(version)
        return version_info.get("full_hash") if version_info else None
    
    def get_default_version(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä—Å–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return self.config.get("default_version", "v4.5.07")
    
    def get_available_versions(self) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ—Ä—Å–∏–π"""
        return list(self.config.get("version_mappings", {}).keys())
    
    def get_docker_image_hash(self, version: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ö–µ—à Docker –æ–±—Ä–∞–∑–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        try:
            result = subprocess.run(
                ["docker", "images", "--format", "{{.ID}}", f"r8.im/nauslava/plitka-pro-project:{version}"],
                capture_output=True, text=True, timeout=10
            )
            if result.returncode == 0 and result.stdout.strip():
                return result.stdout.strip()[:8]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤
            return None
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Docker —Ö–µ—à–∞: {e}")
            return None
    
    def get_replicate_version_hash(self, version: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ö–µ—à –≤–µ—Ä—Å–∏–∏ —Å Replicate API"""
        try:
            import os
            import replicate
            from dotenv import load_dotenv
            
            load_dotenv()
            client = replicate.Client(api_token=os.getenv('REPLICATE_API_TOKEN'))
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏
            model_info = client.models.get(self.config.get("replicate_model", "nauslava/plitka-pro-project"))
            versions = model_info.versions.list()
            
            # –ò—â–µ–º –≤–µ—Ä—Å–∏—é –ø–æ —Ö–µ—à—É –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_hash = self.get_replicate_hash(version)
            if config_hash:
                for ver in versions:
                    if config_hash in ver.id:
                        return config_hash
                # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Replicate, –Ω–æ –µ—Å—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                print(f"‚ö†Ô∏è –í–µ—Ä—Å–∏—è {version} —Å —Ö–µ—à–µ–º {config_hash} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Replicate")
                return None
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º latest
            latest = model_info.latest_version
            if latest:
                return latest.id[:8]
            
            return None
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Replicate —Ö–µ—à–∞: {e}")
            return None
    
    def get_optimal_hash(self, version: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ö–µ—à –¥–ª—è –≤–µ—Ä—Å–∏–∏ (–≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥)"""
        print(f"üîç –ü–æ–∏—Å–∫ —Ö–µ—à–∞ –¥–ª—è –≤–µ—Ä—Å–∏–∏: {version}")
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ—Ä—Å–∏–π (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –≤–µ—Ä—Å–∏–π)
        config_hash = self.get_replicate_hash(version)
        if config_hash:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ö–µ—à –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_hash}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–∞ –≤–µ—Ä—Å–∏—è –Ω–∞ Replicate
            replicate_hash = self.get_replicate_version_hash(version)
            if replicate_hash and replicate_hash == config_hash:
                print(f"‚úÖ –í–µ—Ä—Å–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –Ω–∞ Replicate: {replicate_hash}")
                return replicate_hash
            elif replicate_hash:
                print(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–ª–∏–∫—Ç —Ö–µ—à–µ–π: –∫–æ–Ω—Ñ–∏–≥={config_hash}, replicate={replicate_hash}")
                return config_hash  # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            else:
                print(f"‚ö†Ô∏è –í–µ—Ä—Å–∏—è {version} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Replicate, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
                return config_hash
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: Replicate API (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        replicate_hash = self.get_replicate_version_hash(version)
        if replicate_hash:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω Replicate —Ö–µ—à: {replicate_hash}")
            return replicate_hash
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: Docker –æ–±—Ä–∞–∑—ã
        docker_hash = self.get_docker_image_hash(version)
        if docker_hash:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω Docker —Ö–µ—à: {docker_hash}")
            return docker_hash
        
        # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à latest –≤–µ—Ä—Å–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        fallback_hash = self.get_replicate_hash(self.get_default_version())
        if fallback_hash:
            print(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Ö–µ—à latest –≤–µ—Ä—Å–∏–∏: {fallback_hash}")
            return fallback_hash
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: hardcoded (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
        print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º hardcoded fallback —Ö–µ—à")
        return "ca94ea46"
    
    def update_version_config(self, version: str, replicate_hash: str, full_hash: str, 
                            description: str, status: str = "stable"):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–µ—Ä—Å–∏–∏"""
        if "version_mappings" not in self.config:
            self.config["version_mappings"] = {}
        
        self.config["version_mappings"][version] = {
            "replicate_hash": replicate_hash,
            "full_hash": full_hash,
            "description": description,
            "published_date": "2025-01-11",  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º
            "status": status
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            with open(self.config_path, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ—Ä—Å–∏–∏ {version} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def get_version_status(self, version: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–µ—Ä—Å–∏–∏"""
        version_info = self.get_version_info(version)
        return version_info.get("status", "unknown") if version_info else "unknown"
    
    def is_latest_version(self, version: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–µ—Ä—Å–∏—è latest"""
        return self.get_version_status(version) == "latest"
    
    def get_current_version_from_env(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        return os.getenv('CURRENT_VERSION')
    
    def get_current_hash_from_env(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ö–µ—à –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        return os.getenv('CURRENT_DOCKER_HASH') or os.getenv('CURRENT_GIT_HASH')
    
    def get_version_info_from_file(self) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ –∏–∑ version_info.json"""
        version_info_file = Path('version_info.json')
        try:
            if version_info_file.exists():
                with open(version_info_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è version_info.json: {e}")
        return None
    
    def get_dynamic_version_info(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: env -> file -> config)"""
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_version = self.get_current_version_from_env()
        env_hash = self.get_current_hash_from_env()
        
        if env_version and env_hash:
            return {
                "version": env_version,
                "hash": env_hash,
                "source": "environment"
            }
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –§–∞–π–ª version_info.json
        file_info = self.get_version_info_from_file()
        if file_info:
            return {
                "version": file_info.get("version"),
                "hash": file_info.get("docker_hash") or file_info.get("git_hash"),
                "source": "file"
            }
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        default_version = self.get_default_version()
        config_hash = self.get_replicate_hash(default_version)
        
        return {
            "version": default_version,
            "hash": config_hash,
            "source": "config"
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–µ—Ä—Å–∏–π
version_manager = VersionManager()


def get_optimal_hash(version: str) -> str:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ö–µ—à–∞"""
    return version_manager.get_optimal_hash(version)


def get_version_info(version: str) -> Optional[Dict]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–µ—Ä—Å–∏–∏"""
    return version_manager.get_version_info(version)


def get_current_version() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)"""
    dynamic_info = version_manager.get_dynamic_version_info()
    return dynamic_info.get("version", "unknown")


def get_current_hash() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ö–µ—à (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)"""
    dynamic_info = version_manager.get_dynamic_version_info()
    return dynamic_info.get("hash", "unknown")


def get_current_version_info() -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏"""
    return version_manager.get_dynamic_version_info()


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è
    vm = VersionManager()
    
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VersionManager ===")
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–µ—Ä—Å–∏–∏: {vm.get_available_versions()}")
    print(f"–í–µ—Ä—Å–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {vm.get_default_version()}")
    
    test_version = "v4.5.07"
    print(f"\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–∏: {test_version}")
    print(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏: {vm.get_version_info(test_version)}")
    print(f"Replicate —Ö–µ—à: {vm.get_replicate_hash(test_version)}")
    print(f"–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ö–µ—à: {vm.get_optimal_hash(test_version)}")
