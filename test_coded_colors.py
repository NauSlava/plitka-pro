#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–≤–µ—Ç–æ–≤ —Å –∫–æ–¥–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
"""

from color_manager import ColorManager

def test_coded_colors():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ü–≤–µ—Ç–æ–≤ —Å –∫–æ–¥–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–≤–µ—Ç–æ–≤ —Å –∫–æ–¥–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏...")
    
    # –°–æ–∑–¥–∞–µ–º ColorManager
    color_manager = ColorManager()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Å –∫–æ–¥–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    test_prompts = [
        "ohwx_rubber_tile <s0><s1> 70% RED, 30% BLUE, grid pattern",
        "60% GRSGRN, 40% YELLOW",
        "50% WHITE, 30% GRAY, 20% BLACK",
        "100% EMERALD",
        "25% RED, 25% BLUE, 25% GRSGRN, 25% YELLOW",
        "70% red, 30% blue rubber tile",  # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è fallback
        "50% WHITE, 50% WHITE"  # –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    ]
    
    for i, prompt in enumerate(test_prompts, 1):
        print(f"\nüìù –¢–µ—Å—Ç {i}: {prompt}")
        
        # –¢–µ—Å—Ç extract_colors_from_prompt
        colors = color_manager.extract_colors_from_prompt(prompt)
        print(f"üé® –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞: {colors}")
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        is_valid = color_manager.validate_colors(colors)
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: {'–ü–†–û–ô–î–ï–ù–ê' if is_valid else '–ù–ï –ü–†–û–ô–î–ï–ù–ê'}")
        
        # –¢–µ—Å—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–≤–µ—Ç–æ–≤
        color_count = color_manager.get_color_count(prompt)
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤: {color_count}")
        
        # –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ (—Å–∏–º—É–ª–∏—Ä—É–µ–º –∫–∞–∫ –≤ predict.py)
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤...")
        import re
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–¥–æ–≤—ã—Ö —Å–ª–æ–≤ —Ü–≤–µ—Ç–æ–≤
        color_codes = '|'.join(color_manager.valid_colors)
        
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã: —á–∏—Å–ª–æ% –ö–û–î–û–í–û–ï_–°–õ–û–í–û_–¶–í–ï–¢–ê
        percent_pattern = rf'(\d+(?:\.\d+)?)\s*%\s*({color_codes})\b'
        matches = re.findall(percent_pattern, prompt, re.IGNORECASE)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")
        for percent_str, color_code in matches:
            print(f"  ‚úÖ {percent_str}% {color_code.upper()}")

if __name__ == "__main__":
    test_coded_colors()
