#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º –∏–∑ –ª–æ–≥–æ–≤
"""

from color_manager import ColorManager

def test_real_prompt():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –ª–æ–≥–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ –ª–æ–≥–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º ColorManager
    color_manager = ColorManager()
    
    # –†–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –ª–æ–≥–æ–≤
    real_prompt = "ohwx_rubber_tile <s0><s1> 70% red, 30% blue rubber tile, grid pattern, precise color control"
    
    print(f"üìù –†–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {real_prompt}")
    
    # –¢–µ—Å—Ç extract_colors_from_prompt
    colors = color_manager.extract_colors_from_prompt(real_prompt)
    print(f"üé® –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞: {colors}")
    
    # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    is_valid = color_manager.validate_colors(colors)
    print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: {'–ü–†–û–ô–î–ï–ù–ê' if is_valid else '–ù–ï –ü–†–û–ô–î–ï–ù–ê'}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤
    color_count = color_manager.get_color_count(real_prompt)
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤: {color_count}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∫ –≤ _parse_percent_colors
    parts = [p.strip() for p in real_prompt.split(',') if p.strip()]
    print(f"üìù –ß–∞—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç–∞: {parts}")
    
    for p in parts:
        if '%' in p:
            try:
                percent_str, name = p.split('%', 1)
                percent = float(percent_str.strip())
                color_name = name.strip()
                print(f"  üìä {percent}% - '{color_name}'")
                
                # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–∞
                words = color_name.lower().split()
                found_color = None
                for word in words:
                    if word in color_manager.valid_colors:
                        found_color = word.upper()
                        break
                
                if found_color:
                    print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω —Ü–≤–µ—Ç: {found_color}")
                else:
                    print(f"    ‚ùå –¶–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ: {color_name}")
                    
            except Exception as e:
                print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ '{p}': {e}")

if __name__ == "__main__":
    test_real_prompt()
